/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@distube";
exports.ids = ["vendor-chunks/@distube"];
exports.modules = {

/***/ "(rsc)/./node_modules/@distube/ytdl-core/lib/agent.js":
/*!******************************************************!*\
  !*** ./node_modules/@distube/ytdl-core/lib/agent.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const { ProxyAgent } = __webpack_require__(/*! undici */ \"(rsc)/./node_modules/undici/index.js\");\nconst { HttpsProxyAgent } = __webpack_require__(/*! https-proxy-agent */ \"(rsc)/./node_modules/https-proxy-agent/dist/index.js\");\nconst { Cookie, CookieJar, canonicalDomain } = __webpack_require__(/*! tough-cookie */ \"(rsc)/./node_modules/tough-cookie/lib/cookie.js\");\nconst { CookieAgent, CookieClient } = __webpack_require__(/*! http-cookie-agent/undici */ \"(rsc)/./node_modules/http-cookie-agent/undici/index.js\");\n\nconst convertSameSite = sameSite => {\n  switch (sameSite) {\n    case \"strict\":\n      return \"strict\";\n    case \"lax\":\n      return \"lax\";\n    case \"no_restriction\":\n    case \"unspecified\":\n    default:\n      return \"none\";\n  }\n};\n\nconst convertCookie = cookie =>\n  cookie instanceof Cookie\n    ? cookie\n    : new Cookie({\n        key: cookie.name,\n        value: cookie.value,\n        expires: typeof cookie.expirationDate === \"number\" ? new Date(cookie.expirationDate * 1000) : \"Infinity\",\n        domain: canonicalDomain(cookie.domain),\n        path: cookie.path,\n        secure: cookie.secure,\n        httpOnly: cookie.httpOnly,\n        sameSite: convertSameSite(cookie.sameSite),\n        hostOnly: cookie.hostOnly,\n      });\n\nconst addCookies = (exports.addCookies = (jar, cookies) => {\n  if (!cookies || !Array.isArray(cookies)) {\n    throw new Error(\"cookies must be an array\");\n  }\n  if (!cookies.some(c => c.name === \"SOCS\")) {\n    cookies.push({\n      domain: \".youtube.com\",\n      hostOnly: false,\n      httpOnly: false,\n      name: \"SOCS\",\n      path: \"/\",\n      sameSite: \"lax\",\n      secure: true,\n      session: false,\n      value: \"CAI\",\n    });\n  }\n  for (const cookie of cookies) {\n    jar.setCookieSync(convertCookie(cookie), \"https://www.youtube.com\");\n  }\n});\n\nexports.addCookiesFromString = (jar, cookies) => {\n  if (!cookies || typeof cookies !== \"string\") {\n    throw new Error(\"cookies must be a string\");\n  }\n  return addCookies(\n    jar,\n    cookies\n      .split(\";\")\n      .map(c => Cookie.parse(c))\n      .filter(Boolean),\n  );\n};\n\nconst createAgent = (exports.createAgent = (cookies = [], opts = {}) => {\n  const options = Object.assign({}, opts);\n  if (!options.cookies) {\n    const jar = new CookieJar();\n    addCookies(jar, cookies);\n    options.cookies = { jar };\n  }\n  return {\n    dispatcher: new CookieAgent(options),\n    localAddress: options.localAddress,\n    jar: options.cookies.jar,\n  };\n});\n\nexports.createProxyAgent = (options, cookies = []) => {\n  if (!cookies) cookies = [];\n  if (typeof options === \"string\") options = { uri: options };\n  if (options.factory) throw new Error(\"Cannot use factory with createProxyAgent\");\n  const jar = new CookieJar();\n  addCookies(jar, cookies);\n  const proxyOptions = Object.assign(\n    {\n      factory: (origin, opts) => {\n        const o = Object.assign({ cookies: { jar } }, opts);\n        return new CookieClient(origin, o);\n      },\n    },\n    options,\n  );\n\n  // ProxyAgent type that node httplibrary supports\n  const agent = new HttpsProxyAgent(options.uri);\n\n  // ProxyAgent type that undici supports\n  const dispatcher = new ProxyAgent(proxyOptions);\n\n  return { dispatcher, agent, jar, localAddress: options.localAddress };\n};\n\nexports.defaultAgent = createAgent();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRpc3R1YmUveXRkbC1jb3JlL2xpYi9hZ2VudC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxRQUFRLGFBQWEsRUFBRSxtQkFBTyxDQUFDLG9EQUFRO0FBQ3ZDLFFBQVEsa0JBQWtCLEVBQUUsbUJBQU8sQ0FBQywrRUFBbUI7QUFDdkQsUUFBUSxxQ0FBcUMsRUFBRSxtQkFBTyxDQUFDLHFFQUFjO0FBQ3JFLFFBQVEsNEJBQTRCLEVBQUUsbUJBQU8sQ0FBQyx3RkFBMEI7O0FBRXhFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87O0FBRVAsb0JBQW9CLGtCQUFrQjtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRCw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHFCQUFxQixtQkFBbUIsMkJBQTJCO0FBQ25FLGtDQUFrQztBQUNsQztBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRCx3QkFBd0I7QUFDeEI7QUFDQSwrQ0FBK0M7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLFdBQVcsT0FBTztBQUNwRDtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsV0FBVztBQUNYOztBQUVBLG9CQUFvQiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxCdXJha1xcRG9jdW1lbnRzXFxHaXRIdWJcXHlvdXR1YmUtZG93bmxvYWRlclxcbm9kZV9tb2R1bGVzXFxAZGlzdHViZVxceXRkbC1jb3JlXFxsaWJcXGFnZW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgUHJveHlBZ2VudCB9ID0gcmVxdWlyZShcInVuZGljaVwiKTtcbmNvbnN0IHsgSHR0cHNQcm94eUFnZW50IH0gPSByZXF1aXJlKFwiaHR0cHMtcHJveHktYWdlbnRcIik7XG5jb25zdCB7IENvb2tpZSwgQ29va2llSmFyLCBjYW5vbmljYWxEb21haW4gfSA9IHJlcXVpcmUoXCJ0b3VnaC1jb29raWVcIik7XG5jb25zdCB7IENvb2tpZUFnZW50LCBDb29raWVDbGllbnQgfSA9IHJlcXVpcmUoXCJodHRwLWNvb2tpZS1hZ2VudC91bmRpY2lcIik7XG5cbmNvbnN0IGNvbnZlcnRTYW1lU2l0ZSA9IHNhbWVTaXRlID0+IHtcbiAgc3dpdGNoIChzYW1lU2l0ZSkge1xuICAgIGNhc2UgXCJzdHJpY3RcIjpcbiAgICAgIHJldHVybiBcInN0cmljdFwiO1xuICAgIGNhc2UgXCJsYXhcIjpcbiAgICAgIHJldHVybiBcImxheFwiO1xuICAgIGNhc2UgXCJub19yZXN0cmljdGlvblwiOlxuICAgIGNhc2UgXCJ1bnNwZWNpZmllZFwiOlxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gXCJub25lXCI7XG4gIH1cbn07XG5cbmNvbnN0IGNvbnZlcnRDb29raWUgPSBjb29raWUgPT5cbiAgY29va2llIGluc3RhbmNlb2YgQ29va2llXG4gICAgPyBjb29raWVcbiAgICA6IG5ldyBDb29raWUoe1xuICAgICAgICBrZXk6IGNvb2tpZS5uYW1lLFxuICAgICAgICB2YWx1ZTogY29va2llLnZhbHVlLFxuICAgICAgICBleHBpcmVzOiB0eXBlb2YgY29va2llLmV4cGlyYXRpb25EYXRlID09PSBcIm51bWJlclwiID8gbmV3IERhdGUoY29va2llLmV4cGlyYXRpb25EYXRlICogMTAwMCkgOiBcIkluZmluaXR5XCIsXG4gICAgICAgIGRvbWFpbjogY2Fub25pY2FsRG9tYWluKGNvb2tpZS5kb21haW4pLFxuICAgICAgICBwYXRoOiBjb29raWUucGF0aCxcbiAgICAgICAgc2VjdXJlOiBjb29raWUuc2VjdXJlLFxuICAgICAgICBodHRwT25seTogY29va2llLmh0dHBPbmx5LFxuICAgICAgICBzYW1lU2l0ZTogY29udmVydFNhbWVTaXRlKGNvb2tpZS5zYW1lU2l0ZSksXG4gICAgICAgIGhvc3RPbmx5OiBjb29raWUuaG9zdE9ubHksXG4gICAgICB9KTtcblxuY29uc3QgYWRkQ29va2llcyA9IChleHBvcnRzLmFkZENvb2tpZXMgPSAoamFyLCBjb29raWVzKSA9PiB7XG4gIGlmICghY29va2llcyB8fCAhQXJyYXkuaXNBcnJheShjb29raWVzKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcImNvb2tpZXMgbXVzdCBiZSBhbiBhcnJheVwiKTtcbiAgfVxuICBpZiAoIWNvb2tpZXMuc29tZShjID0+IGMubmFtZSA9PT0gXCJTT0NTXCIpKSB7XG4gICAgY29va2llcy5wdXNoKHtcbiAgICAgIGRvbWFpbjogXCIueW91dHViZS5jb21cIixcbiAgICAgIGhvc3RPbmx5OiBmYWxzZSxcbiAgICAgIGh0dHBPbmx5OiBmYWxzZSxcbiAgICAgIG5hbWU6IFwiU09DU1wiLFxuICAgICAgcGF0aDogXCIvXCIsXG4gICAgICBzYW1lU2l0ZTogXCJsYXhcIixcbiAgICAgIHNlY3VyZTogdHJ1ZSxcbiAgICAgIHNlc3Npb246IGZhbHNlLFxuICAgICAgdmFsdWU6IFwiQ0FJXCIsXG4gICAgfSk7XG4gIH1cbiAgZm9yIChjb25zdCBjb29raWUgb2YgY29va2llcykge1xuICAgIGphci5zZXRDb29raWVTeW5jKGNvbnZlcnRDb29raWUoY29va2llKSwgXCJodHRwczovL3d3dy55b3V0dWJlLmNvbVwiKTtcbiAgfVxufSk7XG5cbmV4cG9ydHMuYWRkQ29va2llc0Zyb21TdHJpbmcgPSAoamFyLCBjb29raWVzKSA9PiB7XG4gIGlmICghY29va2llcyB8fCB0eXBlb2YgY29va2llcyAhPT0gXCJzdHJpbmdcIikge1xuICAgIHRocm93IG5ldyBFcnJvcihcImNvb2tpZXMgbXVzdCBiZSBhIHN0cmluZ1wiKTtcbiAgfVxuICByZXR1cm4gYWRkQ29va2llcyhcbiAgICBqYXIsXG4gICAgY29va2llc1xuICAgICAgLnNwbGl0KFwiO1wiKVxuICAgICAgLm1hcChjID0+IENvb2tpZS5wYXJzZShjKSlcbiAgICAgIC5maWx0ZXIoQm9vbGVhbiksXG4gICk7XG59O1xuXG5jb25zdCBjcmVhdGVBZ2VudCA9IChleHBvcnRzLmNyZWF0ZUFnZW50ID0gKGNvb2tpZXMgPSBbXSwgb3B0cyA9IHt9KSA9PiB7XG4gIGNvbnN0IG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBvcHRzKTtcbiAgaWYgKCFvcHRpb25zLmNvb2tpZXMpIHtcbiAgICBjb25zdCBqYXIgPSBuZXcgQ29va2llSmFyKCk7XG4gICAgYWRkQ29va2llcyhqYXIsIGNvb2tpZXMpO1xuICAgIG9wdGlvbnMuY29va2llcyA9IHsgamFyIH07XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBkaXNwYXRjaGVyOiBuZXcgQ29va2llQWdlbnQob3B0aW9ucyksXG4gICAgbG9jYWxBZGRyZXNzOiBvcHRpb25zLmxvY2FsQWRkcmVzcyxcbiAgICBqYXI6IG9wdGlvbnMuY29va2llcy5qYXIsXG4gIH07XG59KTtcblxuZXhwb3J0cy5jcmVhdGVQcm94eUFnZW50ID0gKG9wdGlvbnMsIGNvb2tpZXMgPSBbXSkgPT4ge1xuICBpZiAoIWNvb2tpZXMpIGNvb2tpZXMgPSBbXTtcbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiKSBvcHRpb25zID0geyB1cmk6IG9wdGlvbnMgfTtcbiAgaWYgKG9wdGlvbnMuZmFjdG9yeSkgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IHVzZSBmYWN0b3J5IHdpdGggY3JlYXRlUHJveHlBZ2VudFwiKTtcbiAgY29uc3QgamFyID0gbmV3IENvb2tpZUphcigpO1xuICBhZGRDb29raWVzKGphciwgY29va2llcyk7XG4gIGNvbnN0IHByb3h5T3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oXG4gICAge1xuICAgICAgZmFjdG9yeTogKG9yaWdpbiwgb3B0cykgPT4ge1xuICAgICAgICBjb25zdCBvID0gT2JqZWN0LmFzc2lnbih7IGNvb2tpZXM6IHsgamFyIH0gfSwgb3B0cyk7XG4gICAgICAgIHJldHVybiBuZXcgQ29va2llQ2xpZW50KG9yaWdpbiwgbyk7XG4gICAgICB9LFxuICAgIH0sXG4gICAgb3B0aW9ucyxcbiAgKTtcblxuICAvLyBQcm94eUFnZW50IHR5cGUgdGhhdCBub2RlIGh0dHBsaWJyYXJ5IHN1cHBvcnRzXG4gIGNvbnN0IGFnZW50ID0gbmV3IEh0dHBzUHJveHlBZ2VudChvcHRpb25zLnVyaSk7XG5cbiAgLy8gUHJveHlBZ2VudCB0eXBlIHRoYXQgdW5kaWNpIHN1cHBvcnRzXG4gIGNvbnN0IGRpc3BhdGNoZXIgPSBuZXcgUHJveHlBZ2VudChwcm94eU9wdGlvbnMpO1xuXG4gIHJldHVybiB7IGRpc3BhdGNoZXIsIGFnZW50LCBqYXIsIGxvY2FsQWRkcmVzczogb3B0aW9ucy5sb2NhbEFkZHJlc3MgfTtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdEFnZW50ID0gY3JlYXRlQWdlbnQoKTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@distube/ytdl-core/lib/agent.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@distube/ytdl-core/lib/cache.js":
/*!******************************************************!*\
  !*** ./node_modules/@distube/ytdl-core/lib/cache.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const { setTimeout } = __webpack_require__(/*! timers */ \"timers\");\n\n// A cache that expires.\nmodule.exports = class Cache extends Map {\n  constructor(timeout = 1000) {\n    super();\n    this.timeout = timeout;\n  }\n  set(key, value) {\n    if (this.has(key)) {\n      clearTimeout(super.get(key).tid);\n    }\n    super.set(key, {\n      tid: setTimeout(this.delete.bind(this, key), this.timeout).unref(),\n      value,\n    });\n  }\n  get(key) {\n    let entry = super.get(key);\n    if (entry) {\n      return entry.value;\n    }\n    return null;\n  }\n  getOrSet(key, fn) {\n    if (this.has(key)) {\n      return this.get(key);\n    } else {\n      let value = fn();\n      this.set(key, value);\n      (async () => {\n        try {\n          await value;\n        } catch (err) {\n          this.delete(key);\n        }\n      })();\n      return value;\n    }\n  }\n  delete(key) {\n    let entry = super.get(key);\n    if (entry) {\n      clearTimeout(entry.tid);\n      super.delete(key);\n    }\n  }\n  clear() {\n    for (let entry of this.values()) {\n      clearTimeout(entry.tid);\n    }\n    super.clear();\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRpc3R1YmUveXRkbC1jb3JlL2xpYi9jYWNoZS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxRQUFRLGFBQWEsRUFBRSxtQkFBTyxDQUFDLHNCQUFROztBQUV2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEJ1cmFrXFxEb2N1bWVudHNcXEdpdEh1YlxceW91dHViZS1kb3dubG9hZGVyXFxub2RlX21vZHVsZXNcXEBkaXN0dWJlXFx5dGRsLWNvcmVcXGxpYlxcY2FjaGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBzZXRUaW1lb3V0IH0gPSByZXF1aXJlKFwidGltZXJzXCIpO1xuXG4vLyBBIGNhY2hlIHRoYXQgZXhwaXJlcy5cbm1vZHVsZS5leHBvcnRzID0gY2xhc3MgQ2FjaGUgZXh0ZW5kcyBNYXAge1xuICBjb25zdHJ1Y3Rvcih0aW1lb3V0ID0gMTAwMCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy50aW1lb3V0ID0gdGltZW91dDtcbiAgfVxuICBzZXQoa2V5LCB2YWx1ZSkge1xuICAgIGlmICh0aGlzLmhhcyhrZXkpKSB7XG4gICAgICBjbGVhclRpbWVvdXQoc3VwZXIuZ2V0KGtleSkudGlkKTtcbiAgICB9XG4gICAgc3VwZXIuc2V0KGtleSwge1xuICAgICAgdGlkOiBzZXRUaW1lb3V0KHRoaXMuZGVsZXRlLmJpbmQodGhpcywga2V5KSwgdGhpcy50aW1lb3V0KS51bnJlZigpLFxuICAgICAgdmFsdWUsXG4gICAgfSk7XG4gIH1cbiAgZ2V0KGtleSkge1xuICAgIGxldCBlbnRyeSA9IHN1cGVyLmdldChrZXkpO1xuICAgIGlmIChlbnRyeSkge1xuICAgICAgcmV0dXJuIGVudHJ5LnZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBnZXRPclNldChrZXksIGZuKSB7XG4gICAgaWYgKHRoaXMuaGFzKGtleSkpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldChrZXkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgdmFsdWUgPSBmbigpO1xuICAgICAgdGhpcy5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAoYXN5bmMgKCkgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGF3YWl0IHZhbHVlO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICB0aGlzLmRlbGV0ZShrZXkpO1xuICAgICAgICB9XG4gICAgICB9KSgpO1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgfVxuICBkZWxldGUoa2V5KSB7XG4gICAgbGV0IGVudHJ5ID0gc3VwZXIuZ2V0KGtleSk7XG4gICAgaWYgKGVudHJ5KSB7XG4gICAgICBjbGVhclRpbWVvdXQoZW50cnkudGlkKTtcbiAgICAgIHN1cGVyLmRlbGV0ZShrZXkpO1xuICAgIH1cbiAgfVxuICBjbGVhcigpIHtcbiAgICBmb3IgKGxldCBlbnRyeSBvZiB0aGlzLnZhbHVlcygpKSB7XG4gICAgICBjbGVhclRpbWVvdXQoZW50cnkudGlkKTtcbiAgICB9XG4gICAgc3VwZXIuY2xlYXIoKTtcbiAgfVxufTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@distube/ytdl-core/lib/cache.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@distube/ytdl-core/lib/format-utils.js":
/*!*************************************************************!*\
  !*** ./node_modules/@distube/ytdl-core/lib/format-utils.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const utils = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@distube/ytdl-core/lib/utils.js\");\nconst FORMATS = __webpack_require__(/*! ./formats */ \"(rsc)/./node_modules/@distube/ytdl-core/lib/formats.js\");\n\n// Use these to help sort formats, higher index is better.\nconst audioEncodingRanks = [\"mp4a\", \"mp3\", \"vorbis\", \"aac\", \"opus\", \"flac\"];\nconst videoEncodingRanks = [\"mp4v\", \"avc1\", \"Sorenson H.283\", \"MPEG-4 Visual\", \"VP8\", \"VP9\", \"H.264\"];\n\nconst getVideoBitrate = format => format.bitrate || 0;\nconst getVideoEncodingRank = format =>\n  videoEncodingRanks.findIndex(enc => format.codecs && format.codecs.includes(enc));\nconst getAudioBitrate = format => format.audioBitrate || 0;\nconst getAudioEncodingRank = format =>\n  audioEncodingRanks.findIndex(enc => format.codecs && format.codecs.includes(enc));\n\n/**\n * Sort formats by a list of functions.\n *\n * @param {Object} a\n * @param {Object} b\n * @param {Array.<Function>} sortBy\n * @returns {number}\n */\nconst sortFormatsBy = (a, b, sortBy) => {\n  let res = 0;\n  for (let fn of sortBy) {\n    res = fn(b) - fn(a);\n    if (res !== 0) {\n      break;\n    }\n  }\n  return res;\n};\n\nconst sortFormatsByVideo = (a, b) =>\n  sortFormatsBy(a, b, [format => parseInt(format.qualityLabel), getVideoBitrate, getVideoEncodingRank]);\n\nconst sortFormatsByAudio = (a, b) => sortFormatsBy(a, b, [getAudioBitrate, getAudioEncodingRank]);\n\n/**\n * Sort formats from highest quality to lowest.\n *\n * @param {Object} a\n * @param {Object} b\n * @returns {number}\n */\nexports.sortFormats = (a, b) =>\n  sortFormatsBy(a, b, [\n    // Formats with both video and audio are ranked highest.\n    format => +!!format.isHLS,\n    format => +!!format.isDashMPD,\n    format => +(format.contentLength > 0),\n    format => +(format.hasVideo && format.hasAudio),\n    format => +format.hasVideo,\n    format => parseInt(format.qualityLabel) || 0,\n    getVideoBitrate,\n    getAudioBitrate,\n    getVideoEncodingRank,\n    getAudioEncodingRank,\n  ]);\n\n/**\n * Choose a format depending on the given options.\n *\n * @param {Array.<Object>} formats\n * @param {Object} options\n * @returns {Object}\n * @throws {Error} when no format matches the filter/format rules\n */\nexports.chooseFormat = (formats, options) => {\n  if (typeof options.format === \"object\") {\n    if (!options.format.url) {\n      throw Error(\"Invalid format given, did you use `ytdl.getInfo()`?\");\n    }\n    return options.format;\n  }\n\n  if (options.filter) {\n    formats = exports.filterFormats(formats, options.filter);\n  }\n\n  // We currently only support HLS-Formats for livestreams\n  // So we (now) remove all non-HLS streams\n  if (formats.some(fmt => fmt.isHLS)) {\n    formats = formats.filter(fmt => fmt.isHLS || !fmt.isLive);\n  }\n\n  let format;\n  const quality = options.quality || \"highest\";\n  switch (quality) {\n    case \"highest\":\n      format = formats[0];\n      break;\n\n    case \"lowest\":\n      format = formats[formats.length - 1];\n      break;\n\n    case \"highestaudio\": {\n      formats = exports.filterFormats(formats, \"audio\");\n      formats.sort(sortFormatsByAudio);\n      // Filter for only the best audio format\n      const bestAudioFormat = formats[0];\n      formats = formats.filter(f => sortFormatsByAudio(bestAudioFormat, f) === 0);\n      // Check for the worst video quality for the best audio quality and pick according\n      // This does not loose default sorting of video encoding and bitrate\n      const worstVideoQuality = formats.map(f => parseInt(f.qualityLabel) || 0).sort((a, b) => a - b)[0];\n      format = formats.find(f => (parseInt(f.qualityLabel) || 0) === worstVideoQuality);\n      break;\n    }\n\n    case \"lowestaudio\":\n      formats = exports.filterFormats(formats, \"audio\");\n      formats.sort(sortFormatsByAudio);\n      format = formats[formats.length - 1];\n      break;\n\n    case \"highestvideo\": {\n      formats = exports.filterFormats(formats, \"video\");\n      formats.sort(sortFormatsByVideo);\n      // Filter for only the best video format\n      const bestVideoFormat = formats[0];\n      formats = formats.filter(f => sortFormatsByVideo(bestVideoFormat, f) === 0);\n      // Check for the worst audio quality for the best video quality and pick according\n      // This does not loose default sorting of audio encoding and bitrate\n      const worstAudioQuality = formats.map(f => f.audioBitrate || 0).sort((a, b) => a - b)[0];\n      format = formats.find(f => (f.audioBitrate || 0) === worstAudioQuality);\n      break;\n    }\n\n    case \"lowestvideo\":\n      formats = exports.filterFormats(formats, \"video\");\n      formats.sort(sortFormatsByVideo);\n      format = formats[formats.length - 1];\n      break;\n\n    default:\n      format = getFormatByQuality(quality, formats);\n      break;\n  }\n\n  if (!format) {\n    throw Error(`No such format found: ${quality}`);\n  }\n  return format;\n};\n\n/**\n * Gets a format based on quality or array of quality's\n *\n * @param {string|[string]} quality\n * @param {[Object]} formats\n * @returns {Object}\n */\nconst getFormatByQuality = (quality, formats) => {\n  let getFormat = itag => formats.find(format => `${format.itag}` === `${itag}`);\n  if (Array.isArray(quality)) {\n    return getFormat(quality.find(q => getFormat(q)));\n  } else {\n    return getFormat(quality);\n  }\n};\n\n/**\n * @param {Array.<Object>} formats\n * @param {Function} filter\n * @returns {Array.<Object>}\n */\nexports.filterFormats = (formats, filter) => {\n  let fn;\n  switch (filter) {\n    case \"videoandaudio\":\n    case \"audioandvideo\":\n      fn = format => format.hasVideo && format.hasAudio;\n      break;\n\n    case \"video\":\n      fn = format => format.hasVideo;\n      break;\n\n    case \"videoonly\":\n      fn = format => format.hasVideo && !format.hasAudio;\n      break;\n\n    case \"audio\":\n      fn = format => format.hasAudio;\n      break;\n\n    case \"audioonly\":\n      fn = format => !format.hasVideo && format.hasAudio;\n      break;\n\n    default:\n      if (typeof filter === \"function\") {\n        fn = filter;\n      } else {\n        throw TypeError(`Given filter (${filter}) is not supported`);\n      }\n  }\n  return formats.filter(format => !!format.url && fn(format));\n};\n\n/**\n * @param {Object} format\n * @returns {Object}\n */\nexports.addFormatMeta = format => {\n  format = Object.assign({}, FORMATS[format.itag], format);\n  format.hasVideo = !!format.qualityLabel;\n  format.hasAudio = !!format.audioBitrate;\n  format.container = format.mimeType ? format.mimeType.split(\";\")[0].split(\"/\")[1] : null;\n  format.codecs = format.mimeType ? utils.between(format.mimeType, 'codecs=\"', '\"') : null;\n  format.videoCodec = format.hasVideo && format.codecs ? format.codecs.split(\", \")[0] : null;\n  format.audioCodec = format.hasAudio && format.codecs ? format.codecs.split(\", \").slice(-1)[0] : null;\n  format.isLive = /\\bsource[/=]yt_live_broadcast\\b/.test(format.url);\n  format.isHLS = /\\/manifest\\/hls_(variant|playlist)\\//.test(format.url);\n  format.isDashMPD = /\\/manifest\\/dash\\//.test(format.url);\n  return format;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@distube/ytdl-core/lib/format-utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@distube/ytdl-core/lib/formats.js":
/*!********************************************************!*\
  !*** ./node_modules/@distube/ytdl-core/lib/formats.js ***!
  \********************************************************/
/***/ ((module) => {

eval("/**\n * http://en.wikipedia.org/wiki/YouTube#Quality_and_formats\n */\nmodule.exports = {\n  5: {\n    mimeType: 'video/flv; codecs=\"Sorenson H.283, mp3\"',\n    qualityLabel: \"240p\",\n    bitrate: 250000,\n    audioBitrate: 64,\n  },\n\n  6: {\n    mimeType: 'video/flv; codecs=\"Sorenson H.263, mp3\"',\n    qualityLabel: \"270p\",\n    bitrate: 800000,\n    audioBitrate: 64,\n  },\n\n  13: {\n    mimeType: 'video/3gp; codecs=\"MPEG-4 Visual, aac\"',\n    qualityLabel: null,\n    bitrate: 500000,\n    audioBitrate: null,\n  },\n\n  17: {\n    mimeType: 'video/3gp; codecs=\"MPEG-4 Visual, aac\"',\n    qualityLabel: \"144p\",\n    bitrate: 50000,\n    audioBitrate: 24,\n  },\n\n  18: {\n    mimeType: 'video/mp4; codecs=\"H.264, aac\"',\n    qualityLabel: \"360p\",\n    bitrate: 500000,\n    audioBitrate: 96,\n  },\n\n  22: {\n    mimeType: 'video/mp4; codecs=\"H.264, aac\"',\n    qualityLabel: \"720p\",\n    bitrate: 2000000,\n    audioBitrate: 192,\n  },\n\n  34: {\n    mimeType: 'video/flv; codecs=\"H.264, aac\"',\n    qualityLabel: \"360p\",\n    bitrate: 500000,\n    audioBitrate: 128,\n  },\n\n  35: {\n    mimeType: 'video/flv; codecs=\"H.264, aac\"',\n    qualityLabel: \"480p\",\n    bitrate: 800000,\n    audioBitrate: 128,\n  },\n\n  36: {\n    mimeType: 'video/3gp; codecs=\"MPEG-4 Visual, aac\"',\n    qualityLabel: \"240p\",\n    bitrate: 175000,\n    audioBitrate: 32,\n  },\n\n  37: {\n    mimeType: 'video/mp4; codecs=\"H.264, aac\"',\n    qualityLabel: \"1080p\",\n    bitrate: 3000000,\n    audioBitrate: 192,\n  },\n\n  38: {\n    mimeType: 'video/mp4; codecs=\"H.264, aac\"',\n    qualityLabel: \"3072p\",\n    bitrate: 3500000,\n    audioBitrate: 192,\n  },\n\n  43: {\n    mimeType: 'video/webm; codecs=\"VP8, vorbis\"',\n    qualityLabel: \"360p\",\n    bitrate: 500000,\n    audioBitrate: 128,\n  },\n\n  44: {\n    mimeType: 'video/webm; codecs=\"VP8, vorbis\"',\n    qualityLabel: \"480p\",\n    bitrate: 1000000,\n    audioBitrate: 128,\n  },\n\n  45: {\n    mimeType: 'video/webm; codecs=\"VP8, vorbis\"',\n    qualityLabel: \"720p\",\n    bitrate: 2000000,\n    audioBitrate: 192,\n  },\n\n  46: {\n    mimeType: 'audio/webm; codecs=\"vp8, vorbis\"',\n    qualityLabel: \"1080p\",\n    bitrate: null,\n    audioBitrate: 192,\n  },\n\n  82: {\n    mimeType: 'video/mp4; codecs=\"H.264, aac\"',\n    qualityLabel: \"360p\",\n    bitrate: 500000,\n    audioBitrate: 96,\n  },\n\n  83: {\n    mimeType: 'video/mp4; codecs=\"H.264, aac\"',\n    qualityLabel: \"240p\",\n    bitrate: 500000,\n    audioBitrate: 96,\n  },\n\n  84: {\n    mimeType: 'video/mp4; codecs=\"H.264, aac\"',\n    qualityLabel: \"720p\",\n    bitrate: 2000000,\n    audioBitrate: 192,\n  },\n\n  85: {\n    mimeType: 'video/mp4; codecs=\"H.264, aac\"',\n    qualityLabel: \"1080p\",\n    bitrate: 3000000,\n    audioBitrate: 192,\n  },\n\n  91: {\n    mimeType: 'video/ts; codecs=\"H.264, aac\"',\n    qualityLabel: \"144p\",\n    bitrate: 100000,\n    audioBitrate: 48,\n  },\n\n  92: {\n    mimeType: 'video/ts; codecs=\"H.264, aac\"',\n    qualityLabel: \"240p\",\n    bitrate: 150000,\n    audioBitrate: 48,\n  },\n\n  93: {\n    mimeType: 'video/ts; codecs=\"H.264, aac\"',\n    qualityLabel: \"360p\",\n    bitrate: 500000,\n    audioBitrate: 128,\n  },\n\n  94: {\n    mimeType: 'video/ts; codecs=\"H.264, aac\"',\n    qualityLabel: \"480p\",\n    bitrate: 800000,\n    audioBitrate: 128,\n  },\n\n  95: {\n    mimeType: 'video/ts; codecs=\"H.264, aac\"',\n    qualityLabel: \"720p\",\n    bitrate: 1500000,\n    audioBitrate: 256,\n  },\n\n  96: {\n    mimeType: 'video/ts; codecs=\"H.264, aac\"',\n    qualityLabel: \"1080p\",\n    bitrate: 2500000,\n    audioBitrate: 256,\n  },\n\n  100: {\n    mimeType: 'audio/webm; codecs=\"VP8, vorbis\"',\n    qualityLabel: \"360p\",\n    bitrate: null,\n    audioBitrate: 128,\n  },\n\n  101: {\n    mimeType: 'audio/webm; codecs=\"VP8, vorbis\"',\n    qualityLabel: \"360p\",\n    bitrate: null,\n    audioBitrate: 192,\n  },\n\n  102: {\n    mimeType: 'audio/webm; codecs=\"VP8, vorbis\"',\n    qualityLabel: \"720p\",\n    bitrate: null,\n    audioBitrate: 192,\n  },\n\n  120: {\n    mimeType: 'video/flv; codecs=\"H.264, aac\"',\n    qualityLabel: \"720p\",\n    bitrate: 2000000,\n    audioBitrate: 128,\n  },\n\n  127: {\n    mimeType: 'audio/ts; codecs=\"aac\"',\n    qualityLabel: null,\n    bitrate: null,\n    audioBitrate: 96,\n  },\n\n  128: {\n    mimeType: 'audio/ts; codecs=\"aac\"',\n    qualityLabel: null,\n    bitrate: null,\n    audioBitrate: 96,\n  },\n\n  132: {\n    mimeType: 'video/ts; codecs=\"H.264, aac\"',\n    qualityLabel: \"240p\",\n    bitrate: 150000,\n    audioBitrate: 48,\n  },\n\n  133: {\n    mimeType: 'video/mp4; codecs=\"H.264\"',\n    qualityLabel: \"240p\",\n    bitrate: 200000,\n    audioBitrate: null,\n  },\n\n  134: {\n    mimeType: 'video/mp4; codecs=\"H.264\"',\n    qualityLabel: \"360p\",\n    bitrate: 300000,\n    audioBitrate: null,\n  },\n\n  135: {\n    mimeType: 'video/mp4; codecs=\"H.264\"',\n    qualityLabel: \"480p\",\n    bitrate: 500000,\n    audioBitrate: null,\n  },\n\n  136: {\n    mimeType: 'video/mp4; codecs=\"H.264\"',\n    qualityLabel: \"720p\",\n    bitrate: 1000000,\n    audioBitrate: null,\n  },\n\n  137: {\n    mimeType: 'video/mp4; codecs=\"H.264\"',\n    qualityLabel: \"1080p\",\n    bitrate: 2500000,\n    audioBitrate: null,\n  },\n\n  138: {\n    mimeType: 'video/mp4; codecs=\"H.264\"',\n    qualityLabel: \"4320p\",\n    bitrate: 13500000,\n    audioBitrate: null,\n  },\n\n  139: {\n    mimeType: 'audio/mp4; codecs=\"aac\"',\n    qualityLabel: null,\n    bitrate: null,\n    audioBitrate: 48,\n  },\n\n  140: {\n    mimeType: 'audio/m4a; codecs=\"aac\"',\n    qualityLabel: null,\n    bitrate: null,\n    audioBitrate: 128,\n  },\n\n  141: {\n    mimeType: 'audio/mp4; codecs=\"aac\"',\n    qualityLabel: null,\n    bitrate: null,\n    audioBitrate: 256,\n  },\n\n  151: {\n    mimeType: 'video/ts; codecs=\"H.264, aac\"',\n    qualityLabel: \"720p\",\n    bitrate: 50000,\n    audioBitrate: 24,\n  },\n\n  160: {\n    mimeType: 'video/mp4; codecs=\"H.264\"',\n    qualityLabel: \"144p\",\n    bitrate: 100000,\n    audioBitrate: null,\n  },\n\n  171: {\n    mimeType: 'audio/webm; codecs=\"vorbis\"',\n    qualityLabel: null,\n    bitrate: null,\n    audioBitrate: 128,\n  },\n\n  172: {\n    mimeType: 'audio/webm; codecs=\"vorbis\"',\n    qualityLabel: null,\n    bitrate: null,\n    audioBitrate: 192,\n  },\n\n  231: {\n    mimeType: 'video/ts; codecs=\"H.264, aac\"',\n    qualityLabel: \"480p\",\n    bitrate: 500000,\n    audioBitrate: null,\n  },\n\n  232: {\n    mimeType: 'video/ts; codecs=\"H.264, aac\"',\n    qualityLabel: \"720p\",\n    bitrate: 800000,\n    audioBitrate: null,\n  },\n\n  242: {\n    mimeType: 'video/webm; codecs=\"VP9\"',\n    qualityLabel: \"240p\",\n    bitrate: 100000,\n    audioBitrate: null,\n  },\n\n  243: {\n    mimeType: 'video/webm; codecs=\"VP9\"',\n    qualityLabel: \"360p\",\n    bitrate: 250000,\n    audioBitrate: null,\n  },\n\n  244: {\n    mimeType: 'video/webm; codecs=\"VP9\"',\n    qualityLabel: \"480p\",\n    bitrate: 500000,\n    audioBitrate: null,\n  },\n\n  247: {\n    mimeType: 'video/webm; codecs=\"VP9\"',\n    qualityLabel: \"720p\",\n    bitrate: 700000,\n    audioBitrate: null,\n  },\n\n  248: {\n    mimeType: 'video/webm; codecs=\"VP9\"',\n    qualityLabel: \"1080p\",\n    bitrate: 1500000,\n    audioBitrate: null,\n  },\n\n  249: {\n    mimeType: 'audio/webm; codecs=\"opus\"',\n    qualityLabel: null,\n    bitrate: null,\n    audioBitrate: 48,\n  },\n\n  250: {\n    mimeType: 'audio/webm; codecs=\"opus\"',\n    qualityLabel: null,\n    bitrate: null,\n    audioBitrate: 64,\n  },\n\n  251: {\n    mimeType: 'audio/webm; codecs=\"opus\"',\n    qualityLabel: null,\n    bitrate: null,\n    audioBitrate: 160,\n  },\n\n  264: {\n    mimeType: 'video/mp4; codecs=\"H.264\"',\n    qualityLabel: \"1440p\",\n    bitrate: 4000000,\n    audioBitrate: null,\n  },\n\n  266: {\n    mimeType: 'video/mp4; codecs=\"H.264\"',\n    qualityLabel: \"2160p\",\n    bitrate: 12500000,\n    audioBitrate: null,\n  },\n\n  270: {\n    mimeType: 'video/mp4; codecs=\"H.264\"',\n    qualityLabel: \"1080p\",\n    bitrate: 2500000,\n    audioBitrate: null,\n  },\n\n  271: {\n    mimeType: 'video/webm; codecs=\"VP9\"',\n    qualityLabel: \"1440p\",\n    bitrate: 9000000,\n    audioBitrate: null,\n  },\n\n  272: {\n    mimeType: 'video/webm; codecs=\"VP9\"',\n    qualityLabel: \"4320p\",\n    bitrate: 20000000,\n    audioBitrate: null,\n  },\n\n  278: {\n    mimeType: 'video/webm; codecs=\"VP9\"',\n    qualityLabel: \"144p 30fps\",\n    bitrate: 80000,\n    audioBitrate: null,\n  },\n\n  298: {\n    mimeType: 'video/mp4; codecs=\"H.264\"',\n    qualityLabel: \"720p\",\n    bitrate: 3000000,\n    audioBitrate: null,\n  },\n\n  299: {\n    mimeType: 'video/mp4; codecs=\"H.264\"',\n    qualityLabel: \"1080p\",\n    bitrate: 5500000,\n    audioBitrate: null,\n  },\n\n  300: {\n    mimeType: 'video/ts; codecs=\"H.264, aac\"',\n    qualityLabel: \"720p\",\n    bitrate: 1318000,\n    audioBitrate: 48,\n  },\n\n  301: {\n    mimeType: 'video/ts; codecs=\"H.264, aac\"',\n    qualityLabel: \"1080p\",\n    bitrate: 3000000,\n    audioBitrate: 128,\n  },\n\n  302: {\n    mimeType: 'video/webm; codecs=\"VP9\"',\n    qualityLabel: \"720p HFR\",\n    bitrate: 2500000,\n    audioBitrate: null,\n  },\n\n  303: {\n    mimeType: 'video/webm; codecs=\"VP9\"',\n    qualityLabel: \"1080p HFR\",\n    bitrate: 5000000,\n    audioBitrate: null,\n  },\n\n  308: {\n    mimeType: 'video/webm; codecs=\"VP9\"',\n    qualityLabel: \"1440p HFR\",\n    bitrate: 10000000,\n    audioBitrate: null,\n  },\n\n  311: {\n    mimeType: 'video/webm; codecs=\"VP9\"',\n    qualityLabel: \"720p\",\n    bitrate: 1250000,\n    audioBitrate: null,\n  },\n\n  312: {\n    mimeType: 'video/mp4; codecs=\"H.264\"',\n    qualityLabel: \"1080p\",\n    bitrate: 2500000,\n    audioBitrate: null,\n  },\n\n  313: {\n    mimeType: 'video/webm; codecs=\"VP9\"',\n    qualityLabel: \"2160p\",\n    bitrate: 13000000,\n    audioBitrate: null,\n  },\n\n  315: {\n    mimeType: 'video/webm; codecs=\"VP9\"',\n    qualityLabel: \"2160p HFR\",\n    bitrate: 20000000,\n    audioBitrate: null,\n  },\n\n  330: {\n    mimeType: 'video/webm; codecs=\"VP9\"',\n    qualityLabel: \"144p HDR, HFR\",\n    bitrate: 80000,\n    audioBitrate: null,\n  },\n\n  331: {\n    mimeType: 'video/webm; codecs=\"VP9\"',\n    qualityLabel: \"240p HDR, HFR\",\n    bitrate: 100000,\n    audioBitrate: null,\n  },\n\n  332: {\n    mimeType: 'video/webm; codecs=\"VP9\"',\n    qualityLabel: \"360p HDR, HFR\",\n    bitrate: 250000,\n    audioBitrate: null,\n  },\n\n  333: {\n    mimeType: 'video/webm; codecs=\"VP9\"',\n    qualityLabel: \"240p HDR, HFR\",\n    bitrate: 500000,\n    audioBitrate: null,\n  },\n\n  334: {\n    mimeType: 'video/webm; codecs=\"VP9\"',\n    qualityLabel: \"720p HDR, HFR\",\n    bitrate: 1000000,\n    audioBitrate: null,\n  },\n\n  335: {\n    mimeType: 'video/webm; codecs=\"VP9\"',\n    qualityLabel: \"1080p HDR, HFR\",\n    bitrate: 1500000,\n    audioBitrate: null,\n  },\n\n  336: {\n    mimeType: 'video/webm; codecs=\"VP9\"',\n    qualityLabel: \"1440p HDR, HFR\",\n    bitrate: 5000000,\n    audioBitrate: null,\n  },\n\n  337: {\n    mimeType: 'video/webm; codecs=\"VP9\"',\n    qualityLabel: \"2160p HDR, HFR\",\n    bitrate: 12000000,\n    audioBitrate: null,\n  },\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@distube/ytdl-core/lib/formats.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@distube/ytdl-core/lib/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@distube/ytdl-core/lib/index.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const PassThrough = (__webpack_require__(/*! stream */ \"stream\").PassThrough);\nconst getInfo = __webpack_require__(/*! ./info */ \"(rsc)/./node_modules/@distube/ytdl-core/lib/info.js\");\nconst utils = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@distube/ytdl-core/lib/utils.js\");\nconst formatUtils = __webpack_require__(/*! ./format-utils */ \"(rsc)/./node_modules/@distube/ytdl-core/lib/format-utils.js\");\nconst urlUtils = __webpack_require__(/*! ./url-utils */ \"(rsc)/./node_modules/@distube/ytdl-core/lib/url-utils.js\");\nconst miniget = __webpack_require__(/*! miniget */ \"(rsc)/./node_modules/miniget/dist/index.js\");\nconst m3u8stream = __webpack_require__(/*! m3u8stream */ \"(rsc)/./node_modules/m3u8stream/dist/index.js\");\nconst { parseTimestamp } = __webpack_require__(/*! m3u8stream */ \"(rsc)/./node_modules/m3u8stream/dist/index.js\");\nconst agent = __webpack_require__(/*! ./agent */ \"(rsc)/./node_modules/@distube/ytdl-core/lib/agent.js\");\n\n/**\n * @param {string} link\n * @param {!Object} options\n * @returns {ReadableStream}\n */\nconst ytdl = (link, options) => {\n  const stream = createStream(options);\n  ytdl.getInfo(link, options).then(\n    info => {\n      downloadFromInfoCallback(stream, info, options);\n    },\n    stream.emit.bind(stream, \"error\"),\n  );\n  return stream;\n};\nmodule.exports = ytdl;\n\nytdl.getBasicInfo = getInfo.getBasicInfo;\nytdl.getInfo = getInfo.getInfo;\nytdl.chooseFormat = formatUtils.chooseFormat;\nytdl.filterFormats = formatUtils.filterFormats;\nytdl.validateID = urlUtils.validateID;\nytdl.validateURL = urlUtils.validateURL;\nytdl.getURLVideoID = urlUtils.getURLVideoID;\nytdl.getVideoID = urlUtils.getVideoID;\nytdl.createAgent = agent.createAgent;\nytdl.createProxyAgent = agent.createProxyAgent;\nytdl.cache = {\n  info: getInfo.cache,\n  watch: getInfo.watchPageCache,\n};\nytdl.version = (__webpack_require__(/*! ../package.json */ \"(rsc)/./node_modules/@distube/ytdl-core/package.json\").version);\n\nconst createStream = options => {\n  const stream = new PassThrough({\n    highWaterMark: (options && options.highWaterMark) || 1024 * 512,\n  });\n  stream._destroy = () => {\n    stream.destroyed = true;\n  };\n  return stream;\n};\n\nconst pipeAndSetEvents = (req, stream, end) => {\n  // Forward events from the request to the stream.\n  [\"abort\", \"request\", \"response\", \"error\", \"redirect\", \"retry\", \"reconnect\"].forEach(event => {\n    req.prependListener(event, stream.emit.bind(stream, event));\n  });\n  req.pipe(stream, { end });\n};\n\n/**\n * Chooses a format to download.\n *\n * @param {stream.Readable} stream\n * @param {Object} info\n * @param {Object} options\n */\nconst downloadFromInfoCallback = (stream, info, options) => {\n  options = options || {};\n\n  let err = utils.playError(info.player_response);\n  if (err) {\n    stream.emit(\"error\", err);\n    return;\n  }\n\n  if (!info.formats.length) {\n    stream.emit(\"error\", Error(\"This video is unavailable\"));\n    return;\n  }\n\n  let format;\n  try {\n    format = formatUtils.chooseFormat(info.formats, options);\n  } catch (e) {\n    stream.emit(\"error\", e);\n    return;\n  }\n  stream.emit(\"info\", info, format);\n  if (stream.destroyed) {\n    return;\n  }\n\n  let contentLength,\n    downloaded = 0;\n  const ondata = chunk => {\n    downloaded += chunk.length;\n    stream.emit(\"progress\", chunk.length, downloaded, contentLength);\n  };\n\n  utils.applyDefaultHeaders(options);\n  if (options.IPv6Block) {\n    options.requestOptions = Object.assign({}, options.requestOptions, {\n      localAddress: utils.getRandomIPv6(options.IPv6Block),\n    });\n  }\n\n  if (options.agent) {\n    // Set agent on both the miniget and m3u8stream requests\n    options.requestOptions.agent = options.agent.agent;\n\n    if (options.agent.jar) {\n      utils.setPropInsensitive(\n        options.requestOptions.headers,\n        \"cookie\",\n        options.agent.jar.getCookieStringSync(\"https://www.youtube.com\"),\n      );\n    }\n    if (options.agent.localAddress) {\n      options.requestOptions.localAddress = options.agent.localAddress;\n    }\n  }\n\n  // Download the file in chunks, in this case the default is 10MB,\n  // anything over this will cause youtube to throttle the download\n  const dlChunkSize = typeof options.dlChunkSize === \"number\" ? options.dlChunkSize : 1024 * 1024 * 10;\n  let req;\n  let shouldEnd = true;\n\n  if (format.isHLS || format.isDashMPD) {\n    req = m3u8stream(format.url, {\n      chunkReadahead: +info.live_chunk_readahead,\n      begin: options.begin || (format.isLive && Date.now()),\n      liveBuffer: options.liveBuffer,\n      // Now we have passed not only custom \"dispatcher\" with undici ProxyAgent, but also \"agent\" field which is compatible for node http\n      requestOptions: options.requestOptions,\n      parser: format.isDashMPD ? \"dash-mpd\" : \"m3u8\",\n      id: format.itag,\n    });\n\n    req.on(\"progress\", (segment, totalSegments) => {\n      stream.emit(\"progress\", segment.size, segment.num, totalSegments);\n    });\n    pipeAndSetEvents(req, stream, shouldEnd);\n  } else {\n    const requestOptions = Object.assign({}, options.requestOptions, {\n      maxReconnects: 6,\n      maxRetries: 3,\n      backoff: { inc: 500, max: 10000 },\n    });\n\n    let shouldBeChunked = dlChunkSize !== 0 && (!format.hasAudio || !format.hasVideo);\n\n    if (shouldBeChunked) {\n      let start = (options.range && options.range.start) || 0;\n      let end = start + dlChunkSize;\n      const rangeEnd = options.range && options.range.end;\n\n      contentLength = options.range\n        ? (rangeEnd ? rangeEnd + 1 : parseInt(format.contentLength)) - start\n        : parseInt(format.contentLength);\n\n      const getNextChunk = () => {\n        if (stream.destroyed) return;\n        if (!rangeEnd && end >= contentLength) end = 0;\n        if (rangeEnd && end > rangeEnd) end = rangeEnd;\n        shouldEnd = !end || end === rangeEnd;\n\n        requestOptions.headers = Object.assign({}, requestOptions.headers, {\n          Range: `bytes=${start}-${end || \"\"}`,\n        });\n        req = miniget(format.url, requestOptions);\n        req.on(\"data\", ondata);\n        req.on(\"end\", () => {\n          if (stream.destroyed) return;\n          if (end && end !== rangeEnd) {\n            start = end + 1;\n            end += dlChunkSize;\n            getNextChunk();\n          }\n        });\n        pipeAndSetEvents(req, stream, shouldEnd);\n      };\n      getNextChunk();\n    } else {\n      // Audio only and video only formats don't support begin\n      if (options.begin) {\n        format.url += `&begin=${parseTimestamp(options.begin)}`;\n      }\n      if (options.range && (options.range.start || options.range.end)) {\n        requestOptions.headers = Object.assign({}, requestOptions.headers, {\n          Range: `bytes=${options.range.start || \"0\"}-${options.range.end || \"\"}`,\n        });\n      }\n      req = miniget(format.url, requestOptions);\n      req.on(\"response\", res => {\n        if (stream.destroyed) return;\n        contentLength = contentLength || parseInt(res.headers[\"content-length\"]);\n      });\n      req.on(\"data\", ondata);\n      pipeAndSetEvents(req, stream, shouldEnd);\n    }\n  }\n\n  stream._destroy = () => {\n    stream.destroyed = true;\n    if (req) {\n      req.destroy();\n      req.end();\n    }\n  };\n};\n\n/**\n * Can be used to download video after its `info` is gotten through\n * `ytdl.getInfo()`. In case the user might want to look at the\n * `info` object before deciding to download.\n *\n * @param {Object} info\n * @param {!Object} options\n * @returns {ReadableStream}\n */\nytdl.downloadFromInfo = (info, options) => {\n  const stream = createStream(options);\n  if (!info.full) {\n    throw Error(\"Cannot use `ytdl.downloadFromInfo()` when called with info from `ytdl.getBasicInfo()`\");\n  }\n  setImmediate(() => {\n    downloadFromInfoCallback(stream, info, options);\n  });\n  return stream;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@distube/ytdl-core/lib/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@distube/ytdl-core/lib/info-extras.js":
/*!************************************************************!*\
  !*** ./node_modules/@distube/ytdl-core/lib/info-extras.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const utils = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@distube/ytdl-core/lib/utils.js\");\nconst qs = __webpack_require__(/*! querystring */ \"querystring\");\nconst { parseTimestamp } = __webpack_require__(/*! m3u8stream */ \"(rsc)/./node_modules/m3u8stream/dist/index.js\");\n\nconst BASE_URL = \"https://www.youtube.com/watch?v=\";\nconst TITLE_TO_CATEGORY = {\n  song: { name: \"Music\", url: \"https://music.youtube.com/\" },\n};\n\nconst getText = obj => (obj ? (obj.runs ? obj.runs[0].text : obj.simpleText) : null);\n\n/**\n * Get video media.\n *\n * @param {Object} info\n * @returns {Object}\n */\nexports.getMedia = info => {\n  let media = {};\n  let results = [];\n  try {\n    results = info.response.contents.twoColumnWatchNextResults.results.results.contents;\n  } catch (err) {\n    // Do nothing\n  }\n\n  let result = results.find(v => v.videoSecondaryInfoRenderer);\n  if (!result) {\n    return {};\n  }\n\n  try {\n    let metadataRows = (result.metadataRowContainer || result.videoSecondaryInfoRenderer.metadataRowContainer)\n      .metadataRowContainerRenderer.rows;\n    for (let row of metadataRows) {\n      if (row.metadataRowRenderer) {\n        let title = getText(row.metadataRowRenderer.title).toLowerCase();\n        let contents = row.metadataRowRenderer.contents[0];\n        media[title] = getText(contents);\n        let runs = contents.runs;\n        if (runs && runs[0].navigationEndpoint) {\n          media[`${title}_url`] = new URL(\n            runs[0].navigationEndpoint.commandMetadata.webCommandMetadata.url,\n            BASE_URL,\n          ).toString();\n        }\n        if (title in TITLE_TO_CATEGORY) {\n          media.category = TITLE_TO_CATEGORY[title].name;\n          media.category_url = TITLE_TO_CATEGORY[title].url;\n        }\n      } else if (row.richMetadataRowRenderer) {\n        let contents = row.richMetadataRowRenderer.contents;\n        let boxArt = contents.filter(\n          meta => meta.richMetadataRenderer.style === \"RICH_METADATA_RENDERER_STYLE_BOX_ART\",\n        );\n        for (let { richMetadataRenderer } of boxArt) {\n          let meta = richMetadataRenderer;\n          media.year = getText(meta.subtitle);\n          let type = getText(meta.callToAction).split(\" \")[1];\n          media[type] = getText(meta.title);\n          media[`${type}_url`] = new URL(meta.endpoint.commandMetadata.webCommandMetadata.url, BASE_URL).toString();\n          media.thumbnails = meta.thumbnail.thumbnails;\n        }\n        let topic = contents.filter(meta => meta.richMetadataRenderer.style === \"RICH_METADATA_RENDERER_STYLE_TOPIC\");\n        for (let { richMetadataRenderer } of topic) {\n          let meta = richMetadataRenderer;\n          media.category = getText(meta.title);\n          media.category_url = new URL(meta.endpoint.commandMetadata.webCommandMetadata.url, BASE_URL).toString();\n        }\n      }\n    }\n  } catch (err) {\n    // Do nothing.\n  }\n\n  return media;\n};\n\nconst isVerified = badges => !!(badges && badges.find(b => b.metadataBadgeRenderer.tooltip === \"Verified\"));\n\n/**\n * Get video author.\n *\n * @param {Object} info\n * @returns {Object}\n */\nexports.getAuthor = info => {\n  let channelId,\n    thumbnails = [],\n    subscriberCount,\n    verified = false;\n  try {\n    let results = info.response.contents.twoColumnWatchNextResults.results.results.contents;\n    let v = results.find(\n      v2 =>\n        v2.videoSecondaryInfoRenderer &&\n        v2.videoSecondaryInfoRenderer.owner &&\n        v2.videoSecondaryInfoRenderer.owner.videoOwnerRenderer,\n    );\n    let videoOwnerRenderer = v.videoSecondaryInfoRenderer.owner.videoOwnerRenderer;\n    channelId = videoOwnerRenderer.navigationEndpoint.browseEndpoint.browseId;\n    thumbnails = videoOwnerRenderer.thumbnail.thumbnails.map(thumbnail => {\n      thumbnail.url = new URL(thumbnail.url, BASE_URL).toString();\n      return thumbnail;\n    });\n    subscriberCount = utils.parseAbbreviatedNumber(getText(videoOwnerRenderer.subscriberCountText));\n    verified = isVerified(videoOwnerRenderer.badges);\n  } catch (err) {\n    // Do nothing.\n  }\n  try {\n    let videoDetails = info.player_response.microformat && info.player_response.microformat.playerMicroformatRenderer;\n    let id = (videoDetails && videoDetails.channelId) || channelId || info.player_response.videoDetails.channelId;\n    let author = {\n      id: id,\n      name: videoDetails ? videoDetails.ownerChannelName : info.player_response.videoDetails.author,\n      user: videoDetails ? videoDetails.ownerProfileUrl.split(\"/\").slice(-1)[0] : null,\n      channel_url: `https://www.youtube.com/channel/${id}`,\n      external_channel_url: videoDetails ? `https://www.youtube.com/channel/${videoDetails.externalChannelId}` : \"\",\n      user_url: videoDetails ? new URL(videoDetails.ownerProfileUrl, BASE_URL).toString() : \"\",\n      thumbnails,\n      verified,\n      subscriber_count: subscriberCount,\n    };\n    if (thumbnails.length) {\n      utils.deprecate(author, \"avatar\", author.thumbnails[0].url, \"author.avatar\", \"author.thumbnails[0].url\");\n    }\n    return author;\n  } catch (err) {\n    return {};\n  }\n};\n\nconst parseRelatedVideo = (details, rvsParams) => {\n  if (!details) return;\n  try {\n    let viewCount = getText(details.viewCountText);\n    let shortViewCount = getText(details.shortViewCountText);\n    let rvsDetails = rvsParams.find(elem => elem.id === details.videoId);\n    if (!/^\\d/.test(shortViewCount)) {\n      shortViewCount = (rvsDetails && rvsDetails.short_view_count_text) || \"\";\n    }\n    viewCount = (/^\\d/.test(viewCount) ? viewCount : shortViewCount).split(\" \")[0];\n    let browseEndpoint = details.shortBylineText.runs[0].navigationEndpoint.browseEndpoint;\n    let channelId = browseEndpoint.browseId;\n    let name = getText(details.shortBylineText);\n    let user = (browseEndpoint.canonicalBaseUrl || \"\").split(\"/\").slice(-1)[0];\n    let video = {\n      id: details.videoId,\n      title: getText(details.title),\n      published: getText(details.publishedTimeText),\n      author: {\n        id: channelId,\n        name,\n        user,\n        channel_url: `https://www.youtube.com/channel/${channelId}`,\n        user_url: `https://www.youtube.com/user/${user}`,\n        thumbnails: details.channelThumbnail.thumbnails.map(thumbnail => {\n          thumbnail.url = new URL(thumbnail.url, BASE_URL).toString();\n          return thumbnail;\n        }),\n        verified: isVerified(details.ownerBadges),\n\n        [Symbol.toPrimitive]() {\n          console.warn(\n            `\\`relatedVideo.author\\` will be removed in a near future release, ` +\n              `use \\`relatedVideo.author.name\\` instead.`,\n          );\n          return video.author.name;\n        },\n      },\n      short_view_count_text: shortViewCount.split(\" \")[0],\n      view_count: viewCount.replace(/,/g, \"\"),\n      length_seconds: details.lengthText\n        ? Math.floor(parseTimestamp(getText(details.lengthText)) / 1000)\n        : rvsParams && `${rvsParams.length_seconds}`,\n      thumbnails: details.thumbnail.thumbnails,\n      richThumbnails: details.richThumbnail\n        ? details.richThumbnail.movingThumbnailRenderer.movingThumbnailDetails.thumbnails\n        : [],\n      isLive: !!(details.badges && details.badges.find(b => b.metadataBadgeRenderer.label === \"LIVE NOW\")),\n    };\n\n    utils.deprecate(\n      video,\n      \"author_thumbnail\",\n      video.author.thumbnails[0].url,\n      \"relatedVideo.author_thumbnail\",\n      \"relatedVideo.author.thumbnails[0].url\",\n    );\n    utils.deprecate(video, \"ucid\", video.author.id, \"relatedVideo.ucid\", \"relatedVideo.author.id\");\n    utils.deprecate(\n      video,\n      \"video_thumbnail\",\n      video.thumbnails[0].url,\n      \"relatedVideo.video_thumbnail\",\n      \"relatedVideo.thumbnails[0].url\",\n    );\n    return video;\n  } catch (err) {\n    // Skip.\n  }\n};\n\n/**\n * Get related videos.\n *\n * @param {Object} info\n * @returns {Array.<Object>}\n */\nexports.getRelatedVideos = info => {\n  let rvsParams = [],\n    secondaryResults = [];\n  try {\n    rvsParams = info.response.webWatchNextResponseExtensionData.relatedVideoArgs.split(\",\").map(e => qs.parse(e));\n  } catch (err) {\n    // Do nothing.\n  }\n  try {\n    secondaryResults = info.response.contents.twoColumnWatchNextResults.secondaryResults.secondaryResults.results;\n  } catch (err) {\n    return [];\n  }\n  let videos = [];\n  for (let result of secondaryResults || []) {\n    let details = result.compactVideoRenderer;\n    if (details) {\n      let video = parseRelatedVideo(details, rvsParams);\n      if (video) videos.push(video);\n    } else {\n      let autoplay = result.compactAutoplayRenderer || result.itemSectionRenderer;\n      if (!autoplay || !Array.isArray(autoplay.contents)) continue;\n      for (let content of autoplay.contents) {\n        let video = parseRelatedVideo(content.compactVideoRenderer, rvsParams);\n        if (video) videos.push(video);\n      }\n    }\n  }\n  return videos;\n};\n\n/**\n * Get like count.\n *\n * @param {Object} info\n * @returns {number}\n */\nexports.getLikes = info => {\n  try {\n    let contents = info.response.contents.twoColumnWatchNextResults.results.results.contents;\n    let video = contents.find(r => r.videoPrimaryInfoRenderer);\n    let buttons = video.videoPrimaryInfoRenderer.videoActions.menuRenderer.topLevelButtons;\n    let accessibilityText = buttons.find(b => b.segmentedLikeDislikeButtonViewModel).segmentedLikeDislikeButtonViewModel\n      .likeButtonViewModel.likeButtonViewModel.toggleButtonViewModel.toggleButtonViewModel.defaultButtonViewModel\n      .buttonViewModel.accessibilityText;\n    return parseInt(accessibilityText.match(/[\\d,.]+/)[0].replace(/\\D+/g, \"\"));\n  } catch (err) {\n    return null;\n  }\n};\n\n/**\n * Cleans up a few fields on `videoDetails`.\n *\n * @param {Object} videoDetails\n * @param {Object} info\n * @returns {Object}\n */\nexports.cleanVideoDetails = (videoDetails, info) => {\n  videoDetails.thumbnails = videoDetails.thumbnail.thumbnails;\n  delete videoDetails.thumbnail;\n  utils.deprecate(\n    videoDetails,\n    \"thumbnail\",\n    { thumbnails: videoDetails.thumbnails },\n    \"videoDetails.thumbnail.thumbnails\",\n    \"videoDetails.thumbnails\",\n  );\n  videoDetails.description = videoDetails.shortDescription || getText(videoDetails.description);\n  delete videoDetails.shortDescription;\n  utils.deprecate(\n    videoDetails,\n    \"shortDescription\",\n    videoDetails.description,\n    \"videoDetails.shortDescription\",\n    \"videoDetails.description\",\n  );\n\n  // Use more reliable `lengthSeconds` from `playerMicroformatRenderer`.\n  videoDetails.lengthSeconds =\n    (info.player_response.microformat && info.player_response.microformat.playerMicroformatRenderer.lengthSeconds) ||\n    info.player_response.videoDetails.lengthSeconds;\n  return videoDetails;\n};\n\n/**\n * Get storyboards info.\n *\n * @param {Object} info\n * @returns {Array.<Object>}\n */\nexports.getStoryboards = info => {\n  const parts =\n    info.player_response.storyboards &&\n    info.player_response.storyboards.playerStoryboardSpecRenderer &&\n    info.player_response.storyboards.playerStoryboardSpecRenderer.spec &&\n    info.player_response.storyboards.playerStoryboardSpecRenderer.spec.split(\"|\");\n\n  if (!parts) return [];\n\n  const url = new URL(parts.shift());\n\n  return parts.map((part, i) => {\n    let [thumbnailWidth, thumbnailHeight, thumbnailCount, columns, rows, interval, nameReplacement, sigh] =\n      part.split(\"#\");\n\n    url.searchParams.set(\"sigh\", sigh);\n\n    thumbnailCount = parseInt(thumbnailCount, 10);\n    columns = parseInt(columns, 10);\n    rows = parseInt(rows, 10);\n\n    const storyboardCount = Math.ceil(thumbnailCount / (columns * rows));\n\n    return {\n      templateUrl: url.toString().replace(\"$L\", i).replace(\"$N\", nameReplacement),\n      thumbnailWidth: parseInt(thumbnailWidth, 10),\n      thumbnailHeight: parseInt(thumbnailHeight, 10),\n      thumbnailCount,\n      interval: parseInt(interval, 10),\n      columns,\n      rows,\n      storyboardCount,\n    };\n  });\n};\n\n/**\n * Get chapters info.\n *\n * @param {Object} info\n * @returns {Array.<Object>}\n */\nexports.getChapters = info => {\n  const playerOverlayRenderer =\n    info.response && info.response.playerOverlays && info.response.playerOverlays.playerOverlayRenderer;\n  const playerBar =\n    playerOverlayRenderer &&\n    playerOverlayRenderer.decoratedPlayerBarRenderer &&\n    playerOverlayRenderer.decoratedPlayerBarRenderer.decoratedPlayerBarRenderer &&\n    playerOverlayRenderer.decoratedPlayerBarRenderer.decoratedPlayerBarRenderer.playerBar;\n  const markersMap =\n    playerBar && playerBar.multiMarkersPlayerBarRenderer && playerBar.multiMarkersPlayerBarRenderer.markersMap;\n  const marker = Array.isArray(markersMap) && markersMap.find(m => m.value && Array.isArray(m.value.chapters));\n  if (!marker) return [];\n  const chapters = marker.value.chapters;\n\n  return chapters.map(chapter => ({\n    title: getText(chapter.chapterRenderer.title),\n    start_time: chapter.chapterRenderer.timeRangeStartMillis / 1000,\n  }));\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRpc3R1YmUveXRkbC1jb3JlL2xpYi9pbmZvLWV4dHJhcy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxjQUFjLG1CQUFPLENBQUMscUVBQVM7QUFDL0IsV0FBVyxtQkFBTyxDQUFDLGdDQUFhO0FBQ2hDLFFBQVEsaUJBQWlCLEVBQUUsbUJBQU8sQ0FBQyxpRUFBWTs7QUFFL0M7QUFDQTtBQUNBLFVBQVUsa0RBQWtEO0FBQzVEOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixhQUFhO0FBQ2I7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixNQUFNO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsdUJBQXVCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLEtBQUs7QUFDeEI7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLHVCQUF1QjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixhQUFhO0FBQ2I7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRCxHQUFHO0FBQ3pELDhFQUE4RSwrQkFBK0I7QUFDN0c7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdEQUF3RCxVQUFVO0FBQ2xFLGtEQUFrRCxLQUFLO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLHlCQUF5QjtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixhQUFhO0FBQ2I7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsYUFBYTtBQUNiO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsYUFBYTtBQUNiO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLHFDQUFxQztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixhQUFhO0FBQ2I7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixhQUFhO0FBQ2I7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxCdXJha1xcRG9jdW1lbnRzXFxHaXRIdWJcXHlvdXR1YmUtZG93bmxvYWRlclxcbm9kZV9tb2R1bGVzXFxAZGlzdHViZVxceXRkbC1jb3JlXFxsaWJcXGluZm8tZXh0cmFzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHV0aWxzID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG5jb25zdCBxcyA9IHJlcXVpcmUoXCJxdWVyeXN0cmluZ1wiKTtcbmNvbnN0IHsgcGFyc2VUaW1lc3RhbXAgfSA9IHJlcXVpcmUoXCJtM3U4c3RyZWFtXCIpO1xuXG5jb25zdCBCQVNFX1VSTCA9IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1cIjtcbmNvbnN0IFRJVExFX1RPX0NBVEVHT1JZID0ge1xuICBzb25nOiB7IG5hbWU6IFwiTXVzaWNcIiwgdXJsOiBcImh0dHBzOi8vbXVzaWMueW91dHViZS5jb20vXCIgfSxcbn07XG5cbmNvbnN0IGdldFRleHQgPSBvYmogPT4gKG9iaiA/IChvYmoucnVucyA/IG9iai5ydW5zWzBdLnRleHQgOiBvYmouc2ltcGxlVGV4dCkgOiBudWxsKTtcblxuLyoqXG4gKiBHZXQgdmlkZW8gbWVkaWEuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGluZm9cbiAqIEByZXR1cm5zIHtPYmplY3R9XG4gKi9cbmV4cG9ydHMuZ2V0TWVkaWEgPSBpbmZvID0+IHtcbiAgbGV0IG1lZGlhID0ge307XG4gIGxldCByZXN1bHRzID0gW107XG4gIHRyeSB7XG4gICAgcmVzdWx0cyA9IGluZm8ucmVzcG9uc2UuY29udGVudHMudHdvQ29sdW1uV2F0Y2hOZXh0UmVzdWx0cy5yZXN1bHRzLnJlc3VsdHMuY29udGVudHM7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERvIG5vdGhpbmdcbiAgfVxuXG4gIGxldCByZXN1bHQgPSByZXN1bHRzLmZpbmQodiA9PiB2LnZpZGVvU2Vjb25kYXJ5SW5mb1JlbmRlcmVyKTtcbiAgaWYgKCFyZXN1bHQpIHtcbiAgICByZXR1cm4ge307XG4gIH1cblxuICB0cnkge1xuICAgIGxldCBtZXRhZGF0YVJvd3MgPSAocmVzdWx0Lm1ldGFkYXRhUm93Q29udGFpbmVyIHx8IHJlc3VsdC52aWRlb1NlY29uZGFyeUluZm9SZW5kZXJlci5tZXRhZGF0YVJvd0NvbnRhaW5lcilcbiAgICAgIC5tZXRhZGF0YVJvd0NvbnRhaW5lclJlbmRlcmVyLnJvd3M7XG4gICAgZm9yIChsZXQgcm93IG9mIG1ldGFkYXRhUm93cykge1xuICAgICAgaWYgKHJvdy5tZXRhZGF0YVJvd1JlbmRlcmVyKSB7XG4gICAgICAgIGxldCB0aXRsZSA9IGdldFRleHQocm93Lm1ldGFkYXRhUm93UmVuZGVyZXIudGl0bGUpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGxldCBjb250ZW50cyA9IHJvdy5tZXRhZGF0YVJvd1JlbmRlcmVyLmNvbnRlbnRzWzBdO1xuICAgICAgICBtZWRpYVt0aXRsZV0gPSBnZXRUZXh0KGNvbnRlbnRzKTtcbiAgICAgICAgbGV0IHJ1bnMgPSBjb250ZW50cy5ydW5zO1xuICAgICAgICBpZiAocnVucyAmJiBydW5zWzBdLm5hdmlnYXRpb25FbmRwb2ludCkge1xuICAgICAgICAgIG1lZGlhW2Ake3RpdGxlfV91cmxgXSA9IG5ldyBVUkwoXG4gICAgICAgICAgICBydW5zWzBdLm5hdmlnYXRpb25FbmRwb2ludC5jb21tYW5kTWV0YWRhdGEud2ViQ29tbWFuZE1ldGFkYXRhLnVybCxcbiAgICAgICAgICAgIEJBU0VfVVJMLFxuICAgICAgICAgICkudG9TdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGl0bGUgaW4gVElUTEVfVE9fQ0FURUdPUlkpIHtcbiAgICAgICAgICBtZWRpYS5jYXRlZ29yeSA9IFRJVExFX1RPX0NBVEVHT1JZW3RpdGxlXS5uYW1lO1xuICAgICAgICAgIG1lZGlhLmNhdGVnb3J5X3VybCA9IFRJVExFX1RPX0NBVEVHT1JZW3RpdGxlXS51cmw7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAocm93LnJpY2hNZXRhZGF0YVJvd1JlbmRlcmVyKSB7XG4gICAgICAgIGxldCBjb250ZW50cyA9IHJvdy5yaWNoTWV0YWRhdGFSb3dSZW5kZXJlci5jb250ZW50cztcbiAgICAgICAgbGV0IGJveEFydCA9IGNvbnRlbnRzLmZpbHRlcihcbiAgICAgICAgICBtZXRhID0+IG1ldGEucmljaE1ldGFkYXRhUmVuZGVyZXIuc3R5bGUgPT09IFwiUklDSF9NRVRBREFUQV9SRU5ERVJFUl9TVFlMRV9CT1hfQVJUXCIsXG4gICAgICAgICk7XG4gICAgICAgIGZvciAobGV0IHsgcmljaE1ldGFkYXRhUmVuZGVyZXIgfSBvZiBib3hBcnQpIHtcbiAgICAgICAgICBsZXQgbWV0YSA9IHJpY2hNZXRhZGF0YVJlbmRlcmVyO1xuICAgICAgICAgIG1lZGlhLnllYXIgPSBnZXRUZXh0KG1ldGEuc3VidGl0bGUpO1xuICAgICAgICAgIGxldCB0eXBlID0gZ2V0VGV4dChtZXRhLmNhbGxUb0FjdGlvbikuc3BsaXQoXCIgXCIpWzFdO1xuICAgICAgICAgIG1lZGlhW3R5cGVdID0gZ2V0VGV4dChtZXRhLnRpdGxlKTtcbiAgICAgICAgICBtZWRpYVtgJHt0eXBlfV91cmxgXSA9IG5ldyBVUkwobWV0YS5lbmRwb2ludC5jb21tYW5kTWV0YWRhdGEud2ViQ29tbWFuZE1ldGFkYXRhLnVybCwgQkFTRV9VUkwpLnRvU3RyaW5nKCk7XG4gICAgICAgICAgbWVkaWEudGh1bWJuYWlscyA9IG1ldGEudGh1bWJuYWlsLnRodW1ibmFpbHM7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHRvcGljID0gY29udGVudHMuZmlsdGVyKG1ldGEgPT4gbWV0YS5yaWNoTWV0YWRhdGFSZW5kZXJlci5zdHlsZSA9PT0gXCJSSUNIX01FVEFEQVRBX1JFTkRFUkVSX1NUWUxFX1RPUElDXCIpO1xuICAgICAgICBmb3IgKGxldCB7IHJpY2hNZXRhZGF0YVJlbmRlcmVyIH0gb2YgdG9waWMpIHtcbiAgICAgICAgICBsZXQgbWV0YSA9IHJpY2hNZXRhZGF0YVJlbmRlcmVyO1xuICAgICAgICAgIG1lZGlhLmNhdGVnb3J5ID0gZ2V0VGV4dChtZXRhLnRpdGxlKTtcbiAgICAgICAgICBtZWRpYS5jYXRlZ29yeV91cmwgPSBuZXcgVVJMKG1ldGEuZW5kcG9pbnQuY29tbWFuZE1ldGFkYXRhLndlYkNvbW1hbmRNZXRhZGF0YS51cmwsIEJBU0VfVVJMKS50b1N0cmluZygpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBEbyBub3RoaW5nLlxuICB9XG5cbiAgcmV0dXJuIG1lZGlhO1xufTtcblxuY29uc3QgaXNWZXJpZmllZCA9IGJhZGdlcyA9PiAhIShiYWRnZXMgJiYgYmFkZ2VzLmZpbmQoYiA9PiBiLm1ldGFkYXRhQmFkZ2VSZW5kZXJlci50b29sdGlwID09PSBcIlZlcmlmaWVkXCIpKTtcblxuLyoqXG4gKiBHZXQgdmlkZW8gYXV0aG9yLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbmZvXG4gKiBAcmV0dXJucyB7T2JqZWN0fVxuICovXG5leHBvcnRzLmdldEF1dGhvciA9IGluZm8gPT4ge1xuICBsZXQgY2hhbm5lbElkLFxuICAgIHRodW1ibmFpbHMgPSBbXSxcbiAgICBzdWJzY3JpYmVyQ291bnQsXG4gICAgdmVyaWZpZWQgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICBsZXQgcmVzdWx0cyA9IGluZm8ucmVzcG9uc2UuY29udGVudHMudHdvQ29sdW1uV2F0Y2hOZXh0UmVzdWx0cy5yZXN1bHRzLnJlc3VsdHMuY29udGVudHM7XG4gICAgbGV0IHYgPSByZXN1bHRzLmZpbmQoXG4gICAgICB2MiA9PlxuICAgICAgICB2Mi52aWRlb1NlY29uZGFyeUluZm9SZW5kZXJlciAmJlxuICAgICAgICB2Mi52aWRlb1NlY29uZGFyeUluZm9SZW5kZXJlci5vd25lciAmJlxuICAgICAgICB2Mi52aWRlb1NlY29uZGFyeUluZm9SZW5kZXJlci5vd25lci52aWRlb093bmVyUmVuZGVyZXIsXG4gICAgKTtcbiAgICBsZXQgdmlkZW9Pd25lclJlbmRlcmVyID0gdi52aWRlb1NlY29uZGFyeUluZm9SZW5kZXJlci5vd25lci52aWRlb093bmVyUmVuZGVyZXI7XG4gICAgY2hhbm5lbElkID0gdmlkZW9Pd25lclJlbmRlcmVyLm5hdmlnYXRpb25FbmRwb2ludC5icm93c2VFbmRwb2ludC5icm93c2VJZDtcbiAgICB0aHVtYm5haWxzID0gdmlkZW9Pd25lclJlbmRlcmVyLnRodW1ibmFpbC50aHVtYm5haWxzLm1hcCh0aHVtYm5haWwgPT4ge1xuICAgICAgdGh1bWJuYWlsLnVybCA9IG5ldyBVUkwodGh1bWJuYWlsLnVybCwgQkFTRV9VUkwpLnRvU3RyaW5nKCk7XG4gICAgICByZXR1cm4gdGh1bWJuYWlsO1xuICAgIH0pO1xuICAgIHN1YnNjcmliZXJDb3VudCA9IHV0aWxzLnBhcnNlQWJicmV2aWF0ZWROdW1iZXIoZ2V0VGV4dCh2aWRlb093bmVyUmVuZGVyZXIuc3Vic2NyaWJlckNvdW50VGV4dCkpO1xuICAgIHZlcmlmaWVkID0gaXNWZXJpZmllZCh2aWRlb093bmVyUmVuZGVyZXIuYmFkZ2VzKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gRG8gbm90aGluZy5cbiAgfVxuICB0cnkge1xuICAgIGxldCB2aWRlb0RldGFpbHMgPSBpbmZvLnBsYXllcl9yZXNwb25zZS5taWNyb2Zvcm1hdCAmJiBpbmZvLnBsYXllcl9yZXNwb25zZS5taWNyb2Zvcm1hdC5wbGF5ZXJNaWNyb2Zvcm1hdFJlbmRlcmVyO1xuICAgIGxldCBpZCA9ICh2aWRlb0RldGFpbHMgJiYgdmlkZW9EZXRhaWxzLmNoYW5uZWxJZCkgfHwgY2hhbm5lbElkIHx8IGluZm8ucGxheWVyX3Jlc3BvbnNlLnZpZGVvRGV0YWlscy5jaGFubmVsSWQ7XG4gICAgbGV0IGF1dGhvciA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIG5hbWU6IHZpZGVvRGV0YWlscyA/IHZpZGVvRGV0YWlscy5vd25lckNoYW5uZWxOYW1lIDogaW5mby5wbGF5ZXJfcmVzcG9uc2UudmlkZW9EZXRhaWxzLmF1dGhvcixcbiAgICAgIHVzZXI6IHZpZGVvRGV0YWlscyA/IHZpZGVvRGV0YWlscy5vd25lclByb2ZpbGVVcmwuc3BsaXQoXCIvXCIpLnNsaWNlKC0xKVswXSA6IG51bGwsXG4gICAgICBjaGFubmVsX3VybDogYGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL2NoYW5uZWwvJHtpZH1gLFxuICAgICAgZXh0ZXJuYWxfY2hhbm5lbF91cmw6IHZpZGVvRGV0YWlscyA/IGBodHRwczovL3d3dy55b3V0dWJlLmNvbS9jaGFubmVsLyR7dmlkZW9EZXRhaWxzLmV4dGVybmFsQ2hhbm5lbElkfWAgOiBcIlwiLFxuICAgICAgdXNlcl91cmw6IHZpZGVvRGV0YWlscyA/IG5ldyBVUkwodmlkZW9EZXRhaWxzLm93bmVyUHJvZmlsZVVybCwgQkFTRV9VUkwpLnRvU3RyaW5nKCkgOiBcIlwiLFxuICAgICAgdGh1bWJuYWlscyxcbiAgICAgIHZlcmlmaWVkLFxuICAgICAgc3Vic2NyaWJlcl9jb3VudDogc3Vic2NyaWJlckNvdW50LFxuICAgIH07XG4gICAgaWYgKHRodW1ibmFpbHMubGVuZ3RoKSB7XG4gICAgICB1dGlscy5kZXByZWNhdGUoYXV0aG9yLCBcImF2YXRhclwiLCBhdXRob3IudGh1bWJuYWlsc1swXS51cmwsIFwiYXV0aG9yLmF2YXRhclwiLCBcImF1dGhvci50aHVtYm5haWxzWzBdLnVybFwiKTtcbiAgICB9XG4gICAgcmV0dXJuIGF1dGhvcjtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG59O1xuXG5jb25zdCBwYXJzZVJlbGF0ZWRWaWRlbyA9IChkZXRhaWxzLCBydnNQYXJhbXMpID0+IHtcbiAgaWYgKCFkZXRhaWxzKSByZXR1cm47XG4gIHRyeSB7XG4gICAgbGV0IHZpZXdDb3VudCA9IGdldFRleHQoZGV0YWlscy52aWV3Q291bnRUZXh0KTtcbiAgICBsZXQgc2hvcnRWaWV3Q291bnQgPSBnZXRUZXh0KGRldGFpbHMuc2hvcnRWaWV3Q291bnRUZXh0KTtcbiAgICBsZXQgcnZzRGV0YWlscyA9IHJ2c1BhcmFtcy5maW5kKGVsZW0gPT4gZWxlbS5pZCA9PT0gZGV0YWlscy52aWRlb0lkKTtcbiAgICBpZiAoIS9eXFxkLy50ZXN0KHNob3J0Vmlld0NvdW50KSkge1xuICAgICAgc2hvcnRWaWV3Q291bnQgPSAocnZzRGV0YWlscyAmJiBydnNEZXRhaWxzLnNob3J0X3ZpZXdfY291bnRfdGV4dCkgfHwgXCJcIjtcbiAgICB9XG4gICAgdmlld0NvdW50ID0gKC9eXFxkLy50ZXN0KHZpZXdDb3VudCkgPyB2aWV3Q291bnQgOiBzaG9ydFZpZXdDb3VudCkuc3BsaXQoXCIgXCIpWzBdO1xuICAgIGxldCBicm93c2VFbmRwb2ludCA9IGRldGFpbHMuc2hvcnRCeWxpbmVUZXh0LnJ1bnNbMF0ubmF2aWdhdGlvbkVuZHBvaW50LmJyb3dzZUVuZHBvaW50O1xuICAgIGxldCBjaGFubmVsSWQgPSBicm93c2VFbmRwb2ludC5icm93c2VJZDtcbiAgICBsZXQgbmFtZSA9IGdldFRleHQoZGV0YWlscy5zaG9ydEJ5bGluZVRleHQpO1xuICAgIGxldCB1c2VyID0gKGJyb3dzZUVuZHBvaW50LmNhbm9uaWNhbEJhc2VVcmwgfHwgXCJcIikuc3BsaXQoXCIvXCIpLnNsaWNlKC0xKVswXTtcbiAgICBsZXQgdmlkZW8gPSB7XG4gICAgICBpZDogZGV0YWlscy52aWRlb0lkLFxuICAgICAgdGl0bGU6IGdldFRleHQoZGV0YWlscy50aXRsZSksXG4gICAgICBwdWJsaXNoZWQ6IGdldFRleHQoZGV0YWlscy5wdWJsaXNoZWRUaW1lVGV4dCksXG4gICAgICBhdXRob3I6IHtcbiAgICAgICAgaWQ6IGNoYW5uZWxJZCxcbiAgICAgICAgbmFtZSxcbiAgICAgICAgdXNlcixcbiAgICAgICAgY2hhbm5lbF91cmw6IGBodHRwczovL3d3dy55b3V0dWJlLmNvbS9jaGFubmVsLyR7Y2hhbm5lbElkfWAsXG4gICAgICAgIHVzZXJfdXJsOiBgaHR0cHM6Ly93d3cueW91dHViZS5jb20vdXNlci8ke3VzZXJ9YCxcbiAgICAgICAgdGh1bWJuYWlsczogZGV0YWlscy5jaGFubmVsVGh1bWJuYWlsLnRodW1ibmFpbHMubWFwKHRodW1ibmFpbCA9PiB7XG4gICAgICAgICAgdGh1bWJuYWlsLnVybCA9IG5ldyBVUkwodGh1bWJuYWlsLnVybCwgQkFTRV9VUkwpLnRvU3RyaW5nKCk7XG4gICAgICAgICAgcmV0dXJuIHRodW1ibmFpbDtcbiAgICAgICAgfSksXG4gICAgICAgIHZlcmlmaWVkOiBpc1ZlcmlmaWVkKGRldGFpbHMub3duZXJCYWRnZXMpLFxuXG4gICAgICAgIFtTeW1ib2wudG9QcmltaXRpdmVdKCkge1xuICAgICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgIGBcXGByZWxhdGVkVmlkZW8uYXV0aG9yXFxgIHdpbGwgYmUgcmVtb3ZlZCBpbiBhIG5lYXIgZnV0dXJlIHJlbGVhc2UsIGAgK1xuICAgICAgICAgICAgICBgdXNlIFxcYHJlbGF0ZWRWaWRlby5hdXRob3IubmFtZVxcYCBpbnN0ZWFkLmAsXG4gICAgICAgICAgKTtcbiAgICAgICAgICByZXR1cm4gdmlkZW8uYXV0aG9yLm5hbWU7XG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgc2hvcnRfdmlld19jb3VudF90ZXh0OiBzaG9ydFZpZXdDb3VudC5zcGxpdChcIiBcIilbMF0sXG4gICAgICB2aWV3X2NvdW50OiB2aWV3Q291bnQucmVwbGFjZSgvLC9nLCBcIlwiKSxcbiAgICAgIGxlbmd0aF9zZWNvbmRzOiBkZXRhaWxzLmxlbmd0aFRleHRcbiAgICAgICAgPyBNYXRoLmZsb29yKHBhcnNlVGltZXN0YW1wKGdldFRleHQoZGV0YWlscy5sZW5ndGhUZXh0KSkgLyAxMDAwKVxuICAgICAgICA6IHJ2c1BhcmFtcyAmJiBgJHtydnNQYXJhbXMubGVuZ3RoX3NlY29uZHN9YCxcbiAgICAgIHRodW1ibmFpbHM6IGRldGFpbHMudGh1bWJuYWlsLnRodW1ibmFpbHMsXG4gICAgICByaWNoVGh1bWJuYWlsczogZGV0YWlscy5yaWNoVGh1bWJuYWlsXG4gICAgICAgID8gZGV0YWlscy5yaWNoVGh1bWJuYWlsLm1vdmluZ1RodW1ibmFpbFJlbmRlcmVyLm1vdmluZ1RodW1ibmFpbERldGFpbHMudGh1bWJuYWlsc1xuICAgICAgICA6IFtdLFxuICAgICAgaXNMaXZlOiAhIShkZXRhaWxzLmJhZGdlcyAmJiBkZXRhaWxzLmJhZGdlcy5maW5kKGIgPT4gYi5tZXRhZGF0YUJhZGdlUmVuZGVyZXIubGFiZWwgPT09IFwiTElWRSBOT1dcIikpLFxuICAgIH07XG5cbiAgICB1dGlscy5kZXByZWNhdGUoXG4gICAgICB2aWRlbyxcbiAgICAgIFwiYXV0aG9yX3RodW1ibmFpbFwiLFxuICAgICAgdmlkZW8uYXV0aG9yLnRodW1ibmFpbHNbMF0udXJsLFxuICAgICAgXCJyZWxhdGVkVmlkZW8uYXV0aG9yX3RodW1ibmFpbFwiLFxuICAgICAgXCJyZWxhdGVkVmlkZW8uYXV0aG9yLnRodW1ibmFpbHNbMF0udXJsXCIsXG4gICAgKTtcbiAgICB1dGlscy5kZXByZWNhdGUodmlkZW8sIFwidWNpZFwiLCB2aWRlby5hdXRob3IuaWQsIFwicmVsYXRlZFZpZGVvLnVjaWRcIiwgXCJyZWxhdGVkVmlkZW8uYXV0aG9yLmlkXCIpO1xuICAgIHV0aWxzLmRlcHJlY2F0ZShcbiAgICAgIHZpZGVvLFxuICAgICAgXCJ2aWRlb190aHVtYm5haWxcIixcbiAgICAgIHZpZGVvLnRodW1ibmFpbHNbMF0udXJsLFxuICAgICAgXCJyZWxhdGVkVmlkZW8udmlkZW9fdGh1bWJuYWlsXCIsXG4gICAgICBcInJlbGF0ZWRWaWRlby50aHVtYm5haWxzWzBdLnVybFwiLFxuICAgICk7XG4gICAgcmV0dXJuIHZpZGVvO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBTa2lwLlxuICB9XG59O1xuXG4vKipcbiAqIEdldCByZWxhdGVkIHZpZGVvcy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gaW5mb1xuICogQHJldHVybnMge0FycmF5LjxPYmplY3Q+fVxuICovXG5leHBvcnRzLmdldFJlbGF0ZWRWaWRlb3MgPSBpbmZvID0+IHtcbiAgbGV0IHJ2c1BhcmFtcyA9IFtdLFxuICAgIHNlY29uZGFyeVJlc3VsdHMgPSBbXTtcbiAgdHJ5IHtcbiAgICBydnNQYXJhbXMgPSBpbmZvLnJlc3BvbnNlLndlYldhdGNoTmV4dFJlc3BvbnNlRXh0ZW5zaW9uRGF0YS5yZWxhdGVkVmlkZW9BcmdzLnNwbGl0KFwiLFwiKS5tYXAoZSA9PiBxcy5wYXJzZShlKSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERvIG5vdGhpbmcuXG4gIH1cbiAgdHJ5IHtcbiAgICBzZWNvbmRhcnlSZXN1bHRzID0gaW5mby5yZXNwb25zZS5jb250ZW50cy50d29Db2x1bW5XYXRjaE5leHRSZXN1bHRzLnNlY29uZGFyeVJlc3VsdHMuc2Vjb25kYXJ5UmVzdWx0cy5yZXN1bHRzO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgbGV0IHZpZGVvcyA9IFtdO1xuICBmb3IgKGxldCByZXN1bHQgb2Ygc2Vjb25kYXJ5UmVzdWx0cyB8fCBbXSkge1xuICAgIGxldCBkZXRhaWxzID0gcmVzdWx0LmNvbXBhY3RWaWRlb1JlbmRlcmVyO1xuICAgIGlmIChkZXRhaWxzKSB7XG4gICAgICBsZXQgdmlkZW8gPSBwYXJzZVJlbGF0ZWRWaWRlbyhkZXRhaWxzLCBydnNQYXJhbXMpO1xuICAgICAgaWYgKHZpZGVvKSB2aWRlb3MucHVzaCh2aWRlbyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBhdXRvcGxheSA9IHJlc3VsdC5jb21wYWN0QXV0b3BsYXlSZW5kZXJlciB8fCByZXN1bHQuaXRlbVNlY3Rpb25SZW5kZXJlcjtcbiAgICAgIGlmICghYXV0b3BsYXkgfHwgIUFycmF5LmlzQXJyYXkoYXV0b3BsYXkuY29udGVudHMpKSBjb250aW51ZTtcbiAgICAgIGZvciAobGV0IGNvbnRlbnQgb2YgYXV0b3BsYXkuY29udGVudHMpIHtcbiAgICAgICAgbGV0IHZpZGVvID0gcGFyc2VSZWxhdGVkVmlkZW8oY29udGVudC5jb21wYWN0VmlkZW9SZW5kZXJlciwgcnZzUGFyYW1zKTtcbiAgICAgICAgaWYgKHZpZGVvKSB2aWRlb3MucHVzaCh2aWRlbyk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB2aWRlb3M7XG59O1xuXG4vKipcbiAqIEdldCBsaWtlIGNvdW50LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbmZvXG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG5leHBvcnRzLmdldExpa2VzID0gaW5mbyA9PiB7XG4gIHRyeSB7XG4gICAgbGV0IGNvbnRlbnRzID0gaW5mby5yZXNwb25zZS5jb250ZW50cy50d29Db2x1bW5XYXRjaE5leHRSZXN1bHRzLnJlc3VsdHMucmVzdWx0cy5jb250ZW50cztcbiAgICBsZXQgdmlkZW8gPSBjb250ZW50cy5maW5kKHIgPT4gci52aWRlb1ByaW1hcnlJbmZvUmVuZGVyZXIpO1xuICAgIGxldCBidXR0b25zID0gdmlkZW8udmlkZW9QcmltYXJ5SW5mb1JlbmRlcmVyLnZpZGVvQWN0aW9ucy5tZW51UmVuZGVyZXIudG9wTGV2ZWxCdXR0b25zO1xuICAgIGxldCBhY2Nlc3NpYmlsaXR5VGV4dCA9IGJ1dHRvbnMuZmluZChiID0+IGIuc2VnbWVudGVkTGlrZURpc2xpa2VCdXR0b25WaWV3TW9kZWwpLnNlZ21lbnRlZExpa2VEaXNsaWtlQnV0dG9uVmlld01vZGVsXG4gICAgICAubGlrZUJ1dHRvblZpZXdNb2RlbC5saWtlQnV0dG9uVmlld01vZGVsLnRvZ2dsZUJ1dHRvblZpZXdNb2RlbC50b2dnbGVCdXR0b25WaWV3TW9kZWwuZGVmYXVsdEJ1dHRvblZpZXdNb2RlbFxuICAgICAgLmJ1dHRvblZpZXdNb2RlbC5hY2Nlc3NpYmlsaXR5VGV4dDtcbiAgICByZXR1cm4gcGFyc2VJbnQoYWNjZXNzaWJpbGl0eVRleHQubWF0Y2goL1tcXGQsLl0rLylbMF0ucmVwbGFjZSgvXFxEKy9nLCBcIlwiKSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJldHVybiBudWxsO1xuICB9XG59O1xuXG4vKipcbiAqIENsZWFucyB1cCBhIGZldyBmaWVsZHMgb24gYHZpZGVvRGV0YWlsc2AuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZpZGVvRGV0YWlsc1xuICogQHBhcmFtIHtPYmplY3R9IGluZm9cbiAqIEByZXR1cm5zIHtPYmplY3R9XG4gKi9cbmV4cG9ydHMuY2xlYW5WaWRlb0RldGFpbHMgPSAodmlkZW9EZXRhaWxzLCBpbmZvKSA9PiB7XG4gIHZpZGVvRGV0YWlscy50aHVtYm5haWxzID0gdmlkZW9EZXRhaWxzLnRodW1ibmFpbC50aHVtYm5haWxzO1xuICBkZWxldGUgdmlkZW9EZXRhaWxzLnRodW1ibmFpbDtcbiAgdXRpbHMuZGVwcmVjYXRlKFxuICAgIHZpZGVvRGV0YWlscyxcbiAgICBcInRodW1ibmFpbFwiLFxuICAgIHsgdGh1bWJuYWlsczogdmlkZW9EZXRhaWxzLnRodW1ibmFpbHMgfSxcbiAgICBcInZpZGVvRGV0YWlscy50aHVtYm5haWwudGh1bWJuYWlsc1wiLFxuICAgIFwidmlkZW9EZXRhaWxzLnRodW1ibmFpbHNcIixcbiAgKTtcbiAgdmlkZW9EZXRhaWxzLmRlc2NyaXB0aW9uID0gdmlkZW9EZXRhaWxzLnNob3J0RGVzY3JpcHRpb24gfHwgZ2V0VGV4dCh2aWRlb0RldGFpbHMuZGVzY3JpcHRpb24pO1xuICBkZWxldGUgdmlkZW9EZXRhaWxzLnNob3J0RGVzY3JpcHRpb247XG4gIHV0aWxzLmRlcHJlY2F0ZShcbiAgICB2aWRlb0RldGFpbHMsXG4gICAgXCJzaG9ydERlc2NyaXB0aW9uXCIsXG4gICAgdmlkZW9EZXRhaWxzLmRlc2NyaXB0aW9uLFxuICAgIFwidmlkZW9EZXRhaWxzLnNob3J0RGVzY3JpcHRpb25cIixcbiAgICBcInZpZGVvRGV0YWlscy5kZXNjcmlwdGlvblwiLFxuICApO1xuXG4gIC8vIFVzZSBtb3JlIHJlbGlhYmxlIGBsZW5ndGhTZWNvbmRzYCBmcm9tIGBwbGF5ZXJNaWNyb2Zvcm1hdFJlbmRlcmVyYC5cbiAgdmlkZW9EZXRhaWxzLmxlbmd0aFNlY29uZHMgPVxuICAgIChpbmZvLnBsYXllcl9yZXNwb25zZS5taWNyb2Zvcm1hdCAmJiBpbmZvLnBsYXllcl9yZXNwb25zZS5taWNyb2Zvcm1hdC5wbGF5ZXJNaWNyb2Zvcm1hdFJlbmRlcmVyLmxlbmd0aFNlY29uZHMpIHx8XG4gICAgaW5mby5wbGF5ZXJfcmVzcG9uc2UudmlkZW9EZXRhaWxzLmxlbmd0aFNlY29uZHM7XG4gIHJldHVybiB2aWRlb0RldGFpbHM7XG59O1xuXG4vKipcbiAqIEdldCBzdG9yeWJvYXJkcyBpbmZvLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbmZvXG4gKiBAcmV0dXJucyB7QXJyYXkuPE9iamVjdD59XG4gKi9cbmV4cG9ydHMuZ2V0U3Rvcnlib2FyZHMgPSBpbmZvID0+IHtcbiAgY29uc3QgcGFydHMgPVxuICAgIGluZm8ucGxheWVyX3Jlc3BvbnNlLnN0b3J5Ym9hcmRzICYmXG4gICAgaW5mby5wbGF5ZXJfcmVzcG9uc2Uuc3Rvcnlib2FyZHMucGxheWVyU3Rvcnlib2FyZFNwZWNSZW5kZXJlciAmJlxuICAgIGluZm8ucGxheWVyX3Jlc3BvbnNlLnN0b3J5Ym9hcmRzLnBsYXllclN0b3J5Ym9hcmRTcGVjUmVuZGVyZXIuc3BlYyAmJlxuICAgIGluZm8ucGxheWVyX3Jlc3BvbnNlLnN0b3J5Ym9hcmRzLnBsYXllclN0b3J5Ym9hcmRTcGVjUmVuZGVyZXIuc3BlYy5zcGxpdChcInxcIik7XG5cbiAgaWYgKCFwYXJ0cykgcmV0dXJuIFtdO1xuXG4gIGNvbnN0IHVybCA9IG5ldyBVUkwocGFydHMuc2hpZnQoKSk7XG5cbiAgcmV0dXJuIHBhcnRzLm1hcCgocGFydCwgaSkgPT4ge1xuICAgIGxldCBbdGh1bWJuYWlsV2lkdGgsIHRodW1ibmFpbEhlaWdodCwgdGh1bWJuYWlsQ291bnQsIGNvbHVtbnMsIHJvd3MsIGludGVydmFsLCBuYW1lUmVwbGFjZW1lbnQsIHNpZ2hdID1cbiAgICAgIHBhcnQuc3BsaXQoXCIjXCIpO1xuXG4gICAgdXJsLnNlYXJjaFBhcmFtcy5zZXQoXCJzaWdoXCIsIHNpZ2gpO1xuXG4gICAgdGh1bWJuYWlsQ291bnQgPSBwYXJzZUludCh0aHVtYm5haWxDb3VudCwgMTApO1xuICAgIGNvbHVtbnMgPSBwYXJzZUludChjb2x1bW5zLCAxMCk7XG4gICAgcm93cyA9IHBhcnNlSW50KHJvd3MsIDEwKTtcblxuICAgIGNvbnN0IHN0b3J5Ym9hcmRDb3VudCA9IE1hdGguY2VpbCh0aHVtYm5haWxDb3VudCAvIChjb2x1bW5zICogcm93cykpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHRlbXBsYXRlVXJsOiB1cmwudG9TdHJpbmcoKS5yZXBsYWNlKFwiJExcIiwgaSkucmVwbGFjZShcIiROXCIsIG5hbWVSZXBsYWNlbWVudCksXG4gICAgICB0aHVtYm5haWxXaWR0aDogcGFyc2VJbnQodGh1bWJuYWlsV2lkdGgsIDEwKSxcbiAgICAgIHRodW1ibmFpbEhlaWdodDogcGFyc2VJbnQodGh1bWJuYWlsSGVpZ2h0LCAxMCksXG4gICAgICB0aHVtYm5haWxDb3VudCxcbiAgICAgIGludGVydmFsOiBwYXJzZUludChpbnRlcnZhbCwgMTApLFxuICAgICAgY29sdW1ucyxcbiAgICAgIHJvd3MsXG4gICAgICBzdG9yeWJvYXJkQ291bnQsXG4gICAgfTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIEdldCBjaGFwdGVycyBpbmZvLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbmZvXG4gKiBAcmV0dXJucyB7QXJyYXkuPE9iamVjdD59XG4gKi9cbmV4cG9ydHMuZ2V0Q2hhcHRlcnMgPSBpbmZvID0+IHtcbiAgY29uc3QgcGxheWVyT3ZlcmxheVJlbmRlcmVyID1cbiAgICBpbmZvLnJlc3BvbnNlICYmIGluZm8ucmVzcG9uc2UucGxheWVyT3ZlcmxheXMgJiYgaW5mby5yZXNwb25zZS5wbGF5ZXJPdmVybGF5cy5wbGF5ZXJPdmVybGF5UmVuZGVyZXI7XG4gIGNvbnN0IHBsYXllckJhciA9XG4gICAgcGxheWVyT3ZlcmxheVJlbmRlcmVyICYmXG4gICAgcGxheWVyT3ZlcmxheVJlbmRlcmVyLmRlY29yYXRlZFBsYXllckJhclJlbmRlcmVyICYmXG4gICAgcGxheWVyT3ZlcmxheVJlbmRlcmVyLmRlY29yYXRlZFBsYXllckJhclJlbmRlcmVyLmRlY29yYXRlZFBsYXllckJhclJlbmRlcmVyICYmXG4gICAgcGxheWVyT3ZlcmxheVJlbmRlcmVyLmRlY29yYXRlZFBsYXllckJhclJlbmRlcmVyLmRlY29yYXRlZFBsYXllckJhclJlbmRlcmVyLnBsYXllckJhcjtcbiAgY29uc3QgbWFya2Vyc01hcCA9XG4gICAgcGxheWVyQmFyICYmIHBsYXllckJhci5tdWx0aU1hcmtlcnNQbGF5ZXJCYXJSZW5kZXJlciAmJiBwbGF5ZXJCYXIubXVsdGlNYXJrZXJzUGxheWVyQmFyUmVuZGVyZXIubWFya2Vyc01hcDtcbiAgY29uc3QgbWFya2VyID0gQXJyYXkuaXNBcnJheShtYXJrZXJzTWFwKSAmJiBtYXJrZXJzTWFwLmZpbmQobSA9PiBtLnZhbHVlICYmIEFycmF5LmlzQXJyYXkobS52YWx1ZS5jaGFwdGVycykpO1xuICBpZiAoIW1hcmtlcikgcmV0dXJuIFtdO1xuICBjb25zdCBjaGFwdGVycyA9IG1hcmtlci52YWx1ZS5jaGFwdGVycztcblxuICByZXR1cm4gY2hhcHRlcnMubWFwKGNoYXB0ZXIgPT4gKHtcbiAgICB0aXRsZTogZ2V0VGV4dChjaGFwdGVyLmNoYXB0ZXJSZW5kZXJlci50aXRsZSksXG4gICAgc3RhcnRfdGltZTogY2hhcHRlci5jaGFwdGVyUmVuZGVyZXIudGltZVJhbmdlU3RhcnRNaWxsaXMgLyAxMDAwLFxuICB9KSk7XG59O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@distube/ytdl-core/lib/info-extras.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@distube/ytdl-core/lib/info.js":
/*!*****************************************************!*\
  !*** ./node_modules/@distube/ytdl-core/lib/info.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/* eslint-disable no-unused-vars */\nconst sax = __webpack_require__(/*! sax */ \"(rsc)/./node_modules/sax/lib/sax.js\");\nconst utils = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@distube/ytdl-core/lib/utils.js\");\n// Forces Node JS version of setTimeout for Electron based applications\nconst { setTimeout } = __webpack_require__(/*! timers */ \"timers\");\nconst formatUtils = __webpack_require__(/*! ./format-utils */ \"(rsc)/./node_modules/@distube/ytdl-core/lib/format-utils.js\");\nconst urlUtils = __webpack_require__(/*! ./url-utils */ \"(rsc)/./node_modules/@distube/ytdl-core/lib/url-utils.js\");\nconst extras = __webpack_require__(/*! ./info-extras */ \"(rsc)/./node_modules/@distube/ytdl-core/lib/info-extras.js\");\nconst Cache = __webpack_require__(/*! ./cache */ \"(rsc)/./node_modules/@distube/ytdl-core/lib/cache.js\");\nconst sig = __webpack_require__(/*! ./sig */ \"(rsc)/./node_modules/@distube/ytdl-core/lib/sig.js\");\n\nconst BASE_URL = \"https://www.youtube.com/watch?v=\";\n\n// Cached for storing basic/full info.\nexports.cache = new Cache();\nexports.watchPageCache = new Cache();\n\n// List of URLs that show up in `notice_url` for age restricted videos.\nconst AGE_RESTRICTED_URLS = [\"support.google.com/youtube/?p=age_restrictions\", \"youtube.com/t/community_guidelines\"];\n\n/**\n * Gets info from a video without getting additional formats.\n *\n * @param {string} id\n * @param {Object} options\n * @returns {Promise<Object>}\n */\nexports.getBasicInfo = async (id, options) => {\n  utils.applyIPv6Rotations(options);\n  utils.applyDefaultHeaders(options);\n  utils.applyDefaultAgent(options);\n  utils.applyOldLocalAddress(options);\n  const retryOptions = Object.assign({}, options.requestOptions);\n  const { jar, dispatcher } = options.agent;\n  utils.setPropInsensitive(\n    options.requestOptions.headers,\n    \"cookie\",\n    jar.getCookieStringSync(\"https://www.youtube.com\"),\n  );\n  options.requestOptions.dispatcher = dispatcher;\n  const info = await retryFunc(getWatchHTMLPage, [id, options], retryOptions);\n\n  const playErr = utils.playError(info.player_response);\n  if (playErr) throw playErr;\n\n  Object.assign(info, {\n    // Replace with formats from iosPlayerResponse\n    // formats: parseFormats(info.player_response),\n    related_videos: extras.getRelatedVideos(info),\n  });\n\n  // Add additional properties to info.\n  const media = extras.getMedia(info);\n  const additional = {\n    author: extras.getAuthor(info),\n    media,\n    likes: extras.getLikes(info),\n    age_restricted: !!(\n      media && AGE_RESTRICTED_URLS.some(url => Object.values(media).some(v => typeof v === \"string\" && v.includes(url)))\n    ),\n\n    // Give the standard link to the video.\n    video_url: BASE_URL + id,\n    storyboards: extras.getStoryboards(info),\n    chapters: extras.getChapters(info),\n  };\n\n  info.videoDetails = extras.cleanVideoDetails(\n    Object.assign(\n      {},\n      info.player_response &&\n        info.player_response.microformat &&\n        info.player_response.microformat.playerMicroformatRenderer,\n      info.player_response && info.player_response.videoDetails,\n      additional,\n    ),\n    info,\n  );\n\n  return info;\n};\n\nconst getWatchHTMLURL = (id, options) =>\n  `${BASE_URL + id}&hl=${options.lang || \"en\"}&bpctr=${Math.ceil(Date.now() / 1000)}&has_verified=1`;\nconst getWatchHTMLPageBody = (id, options) => {\n  const url = getWatchHTMLURL(id, options);\n  return exports.watchPageCache.getOrSet(url, () => utils.request(url, options));\n};\n\nconst EMBED_URL = \"https://www.youtube.com/embed/\";\nconst getEmbedPageBody = (id, options) => {\n  const embedUrl = `${EMBED_URL + id}?hl=${options.lang || \"en\"}`;\n  return utils.request(embedUrl, options);\n};\n\nconst getHTML5player = body => {\n  let html5playerRes =\n    /<script\\s+src=\"([^\"]+)\"(?:\\s+type=\"text\\/javascript\")?\\s+name=\"player_ias\\/base\"\\s*>|\"jsUrl\":\"([^\"]+)\"/.exec(body);\n  return html5playerRes ? html5playerRes[1] || html5playerRes[2] : null;\n};\n\n/**\n * Given a function, calls it with `args` until it's successful,\n * or until it encounters an unrecoverable error.\n * Currently, any error from miniget is considered unrecoverable. Errors such as\n * too many redirects, invalid URL, status code 404, status code 502.\n *\n * @param {Function} func\n * @param {Array.<Object>} args\n * @param {Object} options\n * @param {number} options.maxRetries\n * @param {Object} options.backoff\n * @param {number} options.backoff.inc\n */\nconst retryFunc = async (func, args, options) => {\n  let currentTry = 0,\n    result;\n  if (!options.maxRetries) options.maxRetries = 3;\n  if (!options.backoff) options.backoff = { inc: 500, max: 5000 };\n  while (currentTry <= options.maxRetries) {\n    try {\n      result = await func(...args);\n      break;\n    } catch (err) {\n      if ((err && err.statusCode < 500) || currentTry >= options.maxRetries) throw err;\n      let wait = Math.min(++currentTry * options.backoff.inc, options.backoff.max);\n      await new Promise(resolve => setTimeout(resolve, wait));\n    }\n  }\n  return result;\n};\n\nconst jsonClosingChars = /^[)\\]}'\\s]+/;\nconst parseJSON = (source, varName, json) => {\n  if (!json || typeof json === \"object\") {\n    return json;\n  } else {\n    try {\n      json = json.replace(jsonClosingChars, \"\");\n      return JSON.parse(json);\n    } catch (err) {\n      throw Error(`Error parsing ${varName} in ${source}: ${err.message}`);\n    }\n  }\n};\n\nconst findJSON = (source, varName, body, left, right, prependJSON) => {\n  let jsonStr = utils.between(body, left, right);\n  if (!jsonStr) {\n    throw Error(`Could not find ${varName} in ${source}`);\n  }\n  return parseJSON(source, varName, utils.cutAfterJS(`${prependJSON}${jsonStr}`));\n};\n\nconst findPlayerResponse = (source, info) => {\n  const player_response =\n    info &&\n    ((info.args && info.args.player_response) ||\n      info.player_response ||\n      info.playerResponse ||\n      info.embedded_player_response);\n  return parseJSON(source, \"player_response\", player_response);\n};\n\nconst getWatchHTMLPage = async (id, options) => {\n  let body = await getWatchHTMLPageBody(id, options);\n  let info = { page: \"watch\" };\n  try {\n    try {\n      info.player_response =\n        utils.tryParseBetween(body, \"var ytInitialPlayerResponse = \", \"}};\", \"\", \"}}\") ||\n        utils.tryParseBetween(body, \"var ytInitialPlayerResponse = \", \";var\") ||\n        utils.tryParseBetween(body, \"var ytInitialPlayerResponse = \", \";</script>\") ||\n        findJSON(\"watch.html\", \"player_response\", body, /\\bytInitialPlayerResponse\\s*=\\s*\\{/i, \"</script>\", \"{\");\n    } catch (_e) {\n      let args = findJSON(\"watch.html\", \"player_response\", body, /\\bytplayer\\.config\\s*=\\s*{/, \"</script>\", \"{\");\n      info.player_response = findPlayerResponse(\"watch.html\", args);\n    }\n\n    info.response =\n      utils.tryParseBetween(body, \"var ytInitialData = \", \"}};\", \"\", \"}}\") ||\n      utils.tryParseBetween(body, \"var ytInitialData = \", \";</script>\") ||\n      utils.tryParseBetween(body, 'window[\"ytInitialData\"] = ', \"}};\", \"\", \"}}\") ||\n      utils.tryParseBetween(body, 'window[\"ytInitialData\"] = ', \";</script>\") ||\n      findJSON(\"watch.html\", \"response\", body, /\\bytInitialData(\"\\])?\\s*=\\s*\\{/i, \"</script>\", \"{\");\n    info.html5player = getHTML5player(body);\n  } catch (_) {\n    throw Error(\n      \"Error when parsing watch.html, maybe YouTube made a change.\\n\" +\n        `Please report this issue with the \"${utils.saveDebugFile(\n          \"watch.html\",\n          body,\n        )}\" file on https://github.com/distubejs/ytdl-core/issues.`,\n    );\n  }\n  return info;\n};\n\n/**\n * @param {Object} player_response\n * @returns {Array.<Object>}\n */\nconst parseFormats = player_response => {\n  let formats = [];\n  if (player_response && player_response.streamingData) {\n    formats = formats\n      .concat(player_response.streamingData.formats || [])\n      .concat(player_response.streamingData.adaptiveFormats || []);\n  }\n  return formats;\n};\n\nconst parseAdditionalManifests = (player_response, options) => {\n  let streamingData = player_response && player_response.streamingData,\n    manifests = [];\n  if (streamingData) {\n    if (streamingData.dashManifestUrl) {\n      manifests.push(getDashManifest(streamingData.dashManifestUrl, options));\n    }\n    if (streamingData.hlsManifestUrl) {\n      manifests.push(getM3U8(streamingData.hlsManifestUrl, options));\n    }\n  }\n  return manifests;\n};\n\n// TODO: Clean up this function for readability and support more clients\n/**\n * Gets info from a video additional formats and deciphered URLs.\n *\n * @param {string} id\n * @param {Object} options\n * @returns {Promise<Object>}\n */\nexports.getInfo = async (id, options) => {\n  utils.applyIPv6Rotations(options);\n  utils.applyDefaultHeaders(options);\n  utils.applyDefaultAgent(options);\n  utils.applyOldLocalAddress(options);\n  utils.applyPlayerClients(options);\n  const info = await exports.getBasicInfo(id, options);\n  let funcs = [];\n\n  // Fill in HTML5 player URL\n  info.html5player =\n    info.html5player ||\n    getHTML5player(await getWatchHTMLPageBody(id, options)) ||\n    getHTML5player(await getEmbedPageBody(id, options));\n\n  if (!info.html5player) {\n    throw Error(\"Unable to find html5player file\");\n  }\n\n  const html5player = new URL(info.html5player, BASE_URL).toString();\n\n  try {\n    if (options.playerClients.includes(\"WEB\")) {\n      funcs.push(sig.decipherFormats(parseFormats(info.player_response), html5player, options));\n      funcs.push(...parseAdditionalManifests(info.player_response));\n    }\n    if (info.videoDetails.age_restricted) throw Error(\"Cannot download age restricted videos with mobile clients\");\n    const promises = [];\n    if (options.playerClients.includes(\"WEB_CREATOR\")) promises.push(fetchWebCreatorPlayer(id, html5player, options));\n    if (options.playerClients.includes(\"IOS\")) promises.push(fetchIosJsonPlayer(id, options));\n    if (options.playerClients.includes(\"ANDROID\")) promises.push(fetchAndroidJsonPlayer(id, options));\n    const responses = await Promise.allSettled(promises);\n    info.formats = [].concat(...responses.map(r => parseFormats(r.value)));\n    if (info.formats.length === 0) throw new Error(\"Player JSON API failed\");\n\n    funcs.push(sig.decipherFormats(info.formats, html5player, options));\n\n    for (let resp of responses) {\n      if (resp.value) {\n        funcs.push(...parseAdditionalManifests(resp.value, options));\n      }\n    }\n  } catch (_) {}\n\n  let results = await Promise.all(funcs);\n  info.formats = Object.values(Object.assign({}, ...results));\n  info.formats = info.formats.map(formatUtils.addFormatMeta);\n  info.formats.sort(formatUtils.sortFormats);\n\n  info.full = true;\n  return info;\n};\n\nconst getPlaybackContext = async (html5player, options) => {\n  const body = await utils.request(html5player, options);\n  let mo = body.match(/signatureTimestamp:(\\d+)/);\n\n  return {\n    contentPlaybackContext: {\n      html5Preference: \"HTML5_PREF_WANTS\",\n      signatureTimestamp: mo ? mo[1] : undefined,\n    },\n  };\n};\n\nconst LOCALE = { hl: \"en\", timeZone: \"UTC\", utcOffsetMinutes: 0 },\n  CHECK_FLAGS = { contentCheckOk: true, racyCheckOk: true };\n\nconst WEB_CREATOR_CONTEXT = {\n  client: {\n    clientName: \"WEB_CREATOR\",\n    clientVersion: \"1.20241215.03.00\",\n    ...LOCALE,\n  },\n};\n\nconst fetchWebCreatorPlayer = async (videoId, html5player, options) => {\n  const payload = {\n    context: WEB_CREATOR_CONTEXT,\n    videoId,\n    playbackContext: await getPlaybackContext(html5player, options),\n    ...CHECK_FLAGS,\n  };\n\n  return await playerAPI(videoId, payload, undefined, options);\n};\n\nconst playerAPI = async (videoId, payload, userAgent, options) => {\n  const { jar, dispatcher } = options.agent;\n  const opts = {\n    requestOptions: {\n      method: \"POST\",\n      dispatcher,\n      query: {\n        prettyPrint: false,\n        t: utils.generateClientPlaybackNonce(12),\n        id: videoId,\n      },\n      headers: {\n        \"Content-Type\": \"application/json\",\n        cookie: jar.getCookieStringSync(\"https://www.youtube.com\"),\n        \"User-Agent\": userAgent,\n        \"X-Goog-Api-Format-Version\": \"2\",\n      },\n      body: JSON.stringify(payload),\n    },\n  };\n  const response = await utils.request(\"https://youtubei.googleapis.com/youtubei/v1/player\", opts);\n  const playErr = utils.playError(response);\n  if (playErr) throw playErr;\n  if (!response.videoDetails || videoId !== response.videoDetails.videoId) {\n    const err = new Error(\"Malformed response from YouTube\");\n    err.response = response;\n    throw err;\n  }\n  return response;\n};\n\nconst IOS_CLIENT_VERSION = \"19.42.1\",\n  IOS_DEVICE_MODEL = \"iPhone16,2\",\n  IOS_USER_AGENT_VERSION = \"17_5_1\",\n  IOS_OS_VERSION = \"17.5.1.21F90\";\n\nconst fetchIosJsonPlayer = async (videoId, options) => {\n  const payload = {\n    videoId,\n    cpn: utils.generateClientPlaybackNonce(16),\n    contentCheckOk: true,\n    racyCheckOk: true,\n    context: {\n      client: {\n        clientName: \"IOS\",\n        clientVersion: IOS_CLIENT_VERSION,\n        deviceMake: \"Apple\",\n        deviceModel: IOS_DEVICE_MODEL,\n        platform: \"MOBILE\",\n        osName: \"iOS\",\n        osVersion: IOS_OS_VERSION,\n        hl: \"en\",\n        gl: \"US\",\n        utcOffsetMinutes: -240,\n      },\n      request: {\n        internalExperimentFlags: [],\n        useSsl: true,\n      },\n      user: {\n        lockedSafetyMode: false,\n      },\n    },\n  };\n\n  const { jar, dispatcher } = options.agent;\n  const opts = {\n    requestOptions: {\n      method: \"POST\",\n      dispatcher,\n      query: {\n        prettyPrint: false,\n        t: utils.generateClientPlaybackNonce(12),\n        id: videoId,\n      },\n      headers: {\n        \"Content-Type\": \"application/json\",\n        cookie: jar.getCookieStringSync(\"https://www.youtube.com\"),\n        \"User-Agent\": `com.google.ios.youtube/${IOS_CLIENT_VERSION}(${\n          IOS_DEVICE_MODEL\n        }; U; CPU iOS ${IOS_USER_AGENT_VERSION} like Mac OS X; en_US)`,\n        \"X-Goog-Api-Format-Version\": \"2\",\n      },\n      body: JSON.stringify(payload),\n    },\n  };\n  const response = await utils.request(\"https://youtubei.googleapis.com/youtubei/v1/player\", opts);\n  const playErr = utils.playError(response);\n  if (playErr) throw playErr;\n  if (!response.videoDetails || videoId !== response.videoDetails.videoId) {\n    const err = new Error(\"Malformed response from YouTube\");\n    err.response = response;\n    throw err;\n  }\n  return response;\n};\n\nconst ANDROID_CLIENT_VERSION = \"19.30.36\",\n  ANDROID_OS_VERSION = \"14\",\n  ANDROID_SDK_VERSION = \"34\";\n\nconst fetchAndroidJsonPlayer = async (videoId, options) => {\n  const payload = {\n    videoId,\n    cpn: utils.generateClientPlaybackNonce(16),\n    contentCheckOk: true,\n    racyCheckOk: true,\n    context: {\n      client: {\n        clientName: \"ANDROID\",\n        clientVersion: ANDROID_CLIENT_VERSION,\n        platform: \"MOBILE\",\n        osName: \"Android\",\n        osVersion: ANDROID_OS_VERSION,\n        androidSdkVersion: ANDROID_SDK_VERSION,\n        hl: \"en\",\n        gl: \"US\",\n        utcOffsetMinutes: -240,\n      },\n      request: {\n        internalExperimentFlags: [],\n        useSsl: true,\n      },\n      user: {\n        lockedSafetyMode: false,\n      },\n    },\n  };\n\n  const { jar, dispatcher } = options.agent;\n  const opts = {\n    requestOptions: {\n      method: \"POST\",\n      dispatcher,\n      query: {\n        prettyPrint: false,\n        t: utils.generateClientPlaybackNonce(12),\n        id: videoId,\n      },\n      headers: {\n        \"Content-Type\": \"application/json\",\n        cookie: jar.getCookieStringSync(\"https://www.youtube.com\"),\n        \"User-Agent\": `com.google.android.youtube/${\n          ANDROID_CLIENT_VERSION\n        } (Linux; U; Android ${ANDROID_OS_VERSION}; en_US) gzip`,\n        \"X-Goog-Api-Format-Version\": \"2\",\n      },\n      body: JSON.stringify(payload),\n    },\n  };\n  const response = await utils.request(\"https://youtubei.googleapis.com/youtubei/v1/player\", opts);\n  const playErr = utils.playError(response);\n  if (playErr) throw playErr;\n  if (!response.videoDetails || videoId !== response.videoDetails.videoId) {\n    const err = new Error(\"Malformed response from YouTube\");\n    err.response = response;\n    throw err;\n  }\n  return response;\n};\n\n/**\n * Gets additional DASH formats.\n *\n * @param {string} url\n * @param {Object} options\n * @returns {Promise<Array.<Object>>}\n */\nconst getDashManifest = (url, options) =>\n  new Promise((resolve, reject) => {\n    let formats = {};\n    const parser = sax.parser(false);\n    parser.onerror = reject;\n    let adaptationSet;\n    parser.onopentag = node => {\n      if (node.name === \"ADAPTATIONSET\") {\n        adaptationSet = node.attributes;\n      } else if (node.name === \"REPRESENTATION\") {\n        const itag = parseInt(node.attributes.ID);\n        if (!isNaN(itag)) {\n          formats[url] = Object.assign(\n            {\n              itag,\n              url,\n              bitrate: parseInt(node.attributes.BANDWIDTH),\n              mimeType: `${adaptationSet.MIMETYPE}; codecs=\"${node.attributes.CODECS}\"`,\n            },\n            node.attributes.HEIGHT\n              ? {\n                  width: parseInt(node.attributes.WIDTH),\n                  height: parseInt(node.attributes.HEIGHT),\n                  fps: parseInt(node.attributes.FRAMERATE),\n                }\n              : {\n                  audioSampleRate: node.attributes.AUDIOSAMPLINGRATE,\n                },\n          );\n        }\n      }\n    };\n    parser.onend = () => {\n      resolve(formats);\n    };\n    utils\n      .request(new URL(url, BASE_URL).toString(), options)\n      .then(res => {\n        parser.write(res);\n        parser.close();\n      })\n      .catch(reject);\n  });\n\n/**\n * Gets additional formats.\n *\n * @param {string} url\n * @param {Object} options\n * @returns {Promise<Array.<Object>>}\n */\nconst getM3U8 = async (url, options) => {\n  url = new URL(url, BASE_URL);\n  const body = await utils.request(url.toString(), options);\n  let formats = {};\n  body\n    .split(\"\\n\")\n    .filter(line => /^https?:\\/\\//.test(line))\n    .forEach(line => {\n      const itag = parseInt(line.match(/\\/itag\\/(\\d+)\\//)[1]);\n      formats[line] = { itag, url: line };\n    });\n  return formats;\n};\n\n// Cache get info functions.\n// In case a user wants to get a video's info before downloading.\nfor (let funcName of [\"getBasicInfo\", \"getInfo\"]) {\n  /**\n   * @param {string} link\n   * @param {Object} options\n   * @returns {Promise<Object>}\n   */\n  const func = exports[funcName];\n  exports[funcName] = async (link, options = {}) => {\n    utils.checkForUpdates();\n    let id = await urlUtils.getVideoID(link);\n    const key = [funcName, id, options.lang].join(\"-\");\n    return exports.cache.getOrSet(key, () => func(id, options));\n  };\n}\n\n// Export a few helpers.\nexports.validateID = urlUtils.validateID;\nexports.validateURL = urlUtils.validateURL;\nexports.getURLVideoID = urlUtils.getURLVideoID;\nexports.getVideoID = urlUtils.getVideoID;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@distube/ytdl-core/lib/info.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@distube/ytdl-core/lib/sig.js":
/*!****************************************************!*\
  !*** ./node_modules/@distube/ytdl-core/lib/sig.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const querystring = __webpack_require__(/*! querystring */ \"querystring\");\nconst Cache = __webpack_require__(/*! ./cache */ \"(rsc)/./node_modules/@distube/ytdl-core/lib/cache.js\");\nconst utils = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@distube/ytdl-core/lib/utils.js\");\nconst vm = __webpack_require__(/*! vm */ \"vm\");\n\n// A shared cache to keep track of html5player js functions.\nexports.cache = new Cache(1);\n\n/**\n * Extract signature deciphering and n parameter transform functions from html5player file.\n *\n * @param {string} html5playerfile\n * @param {Object} options\n * @returns {Promise<Array.<string>>}\n */\nexports.getFunctions = (html5playerfile, options) =>\n  exports.cache.getOrSet(html5playerfile, async () => {\n    const body = await utils.request(html5playerfile, options);\n    const functions = exports.extractFunctions(body);\n    exports.cache.set(html5playerfile, functions);\n    return functions;\n  });\n\n// NewPipeExtractor regexps\nconst DECIPHER_NAME_REGEXPS = [\n  \"\\\\bm=([a-zA-Z0-9$]{2,})\\\\(decodeURIComponent\\\\(h\\\\.s\\\\)\\\\)\",\n  \"\\\\bc&&\\\\(c=([a-zA-Z0-9$]{2,})\\\\(decodeURIComponent\\\\(c\\\\)\\\\)\",\n  '(?:\\\\b|[^a-zA-Z0-9$])([a-zA-Z0-9$]{2,})\\\\s*=\\\\s*function\\\\(\\\\s*a\\\\s*\\\\)\\\\s*\\\\{\\\\s*a\\\\s*=\\\\s*a\\\\.split\\\\(\\\\s*\"\"\\\\s*\\\\)',\n  '([\\\\w$]+)\\\\s*=\\\\s*function\\\\((\\\\w+)\\\\)\\\\{\\\\s*\\\\2=\\\\s*\\\\2\\\\.split\\\\(\"\"\\\\)\\\\s*;',\n];\n\n// LavaPlayer regexps\nconst VARIABLE_PART = \"[a-zA-Z_\\\\$][a-zA-Z_0-9]*\";\nconst VARIABLE_PART_DEFINE = `\\\\\"?${VARIABLE_PART}\\\\\"?`;\nconst BEFORE_ACCESS = '(?:\\\\[\\\\\"|\\\\.)';\nconst AFTER_ACCESS = '(?:\\\\\"\\\\]|)';\nconst VARIABLE_PART_ACCESS = BEFORE_ACCESS + VARIABLE_PART + AFTER_ACCESS;\nconst REVERSE_PART = \":function\\\\(\\\\w\\\\)\\\\{(?:return )?\\\\w\\\\.reverse\\\\(\\\\)\\\\}\";\nconst SLICE_PART = \":function\\\\(\\\\w,\\\\w\\\\)\\\\{return \\\\w\\\\.slice\\\\(\\\\w\\\\)\\\\}\";\nconst SPLICE_PART = \":function\\\\(\\\\w,\\\\w\\\\)\\\\{\\\\w\\\\.splice\\\\(0,\\\\w\\\\)\\\\}\";\nconst SWAP_PART =\n  \":function\\\\(\\\\w,\\\\w\\\\)\\\\{var \\\\w=\\\\w\\\\[0\\\\];\\\\w\\\\[0\\\\]=\\\\w\\\\[\\\\w%\\\\w\\\\.length\\\\];\\\\w\\\\[\\\\w(?:%\\\\w.length|)\\\\]=\\\\w(?:;return \\\\w)?\\\\}\";\n\nconst DECIPHER_REGEXP =\n  `function(?: ${VARIABLE_PART})?\\\\(([a-zA-Z])\\\\)\\\\{` +\n  '\\\\1=\\\\1\\\\.split\\\\(\"\"\\\\);\\\\s*' +\n  `((?:(?:\\\\1=)?${VARIABLE_PART}${VARIABLE_PART_ACCESS}\\\\(\\\\1,\\\\d+\\\\);)+)` +\n  'return \\\\1\\\\.join\\\\(\"\"\\\\)' +\n  `\\\\}`;\n\nconst HELPER_REGEXP = `var (${VARIABLE_PART})=\\\\{((?:(?:${VARIABLE_PART_DEFINE}${REVERSE_PART}|${\n  VARIABLE_PART_DEFINE\n}${SLICE_PART}|${VARIABLE_PART_DEFINE}${SPLICE_PART}|${VARIABLE_PART_DEFINE}${SWAP_PART}),?\\\\n?)+)\\\\};`;\n\nconst SCVR = \"[a-zA-Z0-9$_]\";\nconst MCR = `${SCVR}+`;\nconst AAR = \"\\\\[(\\\\d+)]\";\nconst N_TRANSFORM_NAME_REGEXPS = [\n  // NewPipeExtractor regexps\n  `${SCVR}=\"nn\"\\\\[\\\\+${MCR}\\\\.${MCR}],${MCR}\\\\(${MCR}\\\\),${MCR}=${MCR}\\\\.${MCR}\\\\[${MCR}]\\\\|\\\\|null\\\\).+\\\\|\\\\|(${MCR})\\\\(\"\"\\\\)`,\n  `${SCVR}=\"nn\"\\\\[\\\\+${MCR}\\\\.${MCR}],${MCR}\\\\(${MCR}\\\\),${MCR}=${MCR}\\\\.${MCR}\\\\[${MCR}]\\\\|\\\\|null\\\\)&&\\\\(${MCR}=(${MCR})${AAR}`,\n  `${SCVR}=\"nn\"\\\\[\\\\+${MCR}\\\\.${MCR}],${MCR}=${MCR}\\\\.get\\\\(${MCR}\\\\)\\\\).+\\\\|\\\\|(${MCR})\\\\(\"\"\\\\)`,\n  `${SCVR}=\"nn\"\\\\[\\\\+${MCR}\\\\.${MCR}],${MCR}=${MCR}\\\\.get\\\\(${MCR}\\\\)\\\\)&&\\\\(${MCR}=(${MCR})\\\\[(\\\\d+)]`,\n  `\\\\(${SCVR}=String\\\\.fromCharCode\\\\(110\\\\),${SCVR}=${SCVR}\\\\.get\\\\(${SCVR}\\\\)\\\\)&&\\\\(${SCVR}=(${MCR})(?:${AAR})?\\\\(${SCVR}\\\\)`,\n  `\\\\.get\\\\(\"n\"\\\\)\\\\)&&\\\\(${SCVR}=(${MCR})(?:${AAR})?\\\\(${SCVR}\\\\)`,\n];\n\n// LavaPlayer regexps\nconst N_TRANSFORM_REGEXP =\n  \"function\\\\(\\\\s*(\\\\w+)\\\\s*\\\\)\\\\s*\\\\{\" +\n  \"var\\\\s*(\\\\w+)=(?:\\\\1\\\\.split\\\\(.*?\\\\)|String\\\\.prototype\\\\.split\\\\.call\\\\(\\\\1,.*?\\\\)),\" +\n  \"\\\\s*(\\\\w+)=(\\\\[.*?]);\\\\s*\\\\3\\\\[\\\\d+]\" +\n  \"(.*?try)(\\\\{.*?})catch\\\\(\\\\s*(\\\\w+)\\\\s*\\\\)\\\\s*\\\\{\" +\n  '\\\\s*return\"[\\\\w-]+([A-z0-9-]+)\"\\\\s*\\\\+\\\\s*\\\\1\\\\s*}' +\n  '\\\\s*return\\\\s*(\\\\2\\\\.join\\\\(\"\"\\\\)|Array\\\\.prototype\\\\.join\\\\.call\\\\(\\\\2,.*?\\\\))};';\n\nconst DECIPHER_ARGUMENT = \"sig\";\nconst N_ARGUMENT = \"ncode\";\n\nconst matchRegex = (regex, str) => {\n  const match = str.match(new RegExp(regex, \"s\"));\n  if (!match) throw new Error(`Could not match ${regex}`);\n  return match;\n};\n\nconst matchFirst = (regex, str) => matchRegex(regex, str)[0];\n\nconst matchGroup1 = (regex, str) => matchRegex(regex, str)[1];\n\nconst getFuncName = (body, regexps) => {\n  let fn;\n  for (const regex of regexps) {\n    try {\n      fn = matchGroup1(regex, body);\n      try {\n        fn = matchGroup1(`${fn.replace(/\\$/g, \"\\\\$\")}=\\\\[([a-zA-Z0-9$\\\\[\\\\]]{2,})\\\\]`, body);\n      } catch (err) {\n        // Function name is not inside an array\n      }\n      break;\n    } catch (err) {\n      continue;\n    }\n  }\n  if (!fn || fn.includes(\"[\")) throw Error();\n  return fn;\n};\n\nconst DECIPHER_FUNC_NAME = \"DisTubeDecipherFunc\";\nconst extractDecipherFunc = (exports.d1 = body => {\n  try {\n    const helperObject = matchFirst(HELPER_REGEXP, body);\n    const decipherFunc = matchFirst(DECIPHER_REGEXP, body);\n    const resultFunc = `var ${DECIPHER_FUNC_NAME}=${decipherFunc};`;\n    const callerFunc = `${DECIPHER_FUNC_NAME}(${DECIPHER_ARGUMENT});`;\n    return helperObject + resultFunc + callerFunc;\n  } catch (e) {\n    return null;\n  }\n});\n\nconst extractDecipherWithName = (exports.d2 = body => {\n  try {\n    const decipherFuncName = getFuncName(body, DECIPHER_NAME_REGEXPS);\n    const funcPattern = `(${decipherFuncName.replace(/\\$/g, \"\\\\$\")}=function\\\\([a-zA-Z0-9_]+\\\\)\\\\{.+?\\\\})`;\n    const decipherFunc = `var ${matchGroup1(funcPattern, body)};`;\n    const helperObjectName = matchGroup1(\";([A-Za-z0-9_\\\\$]{2,})\\\\.\\\\w+\\\\(\", decipherFunc);\n    const helperPattern = `(var ${helperObjectName.replace(/\\$/g, \"\\\\$\")}=\\\\{[\\\\s\\\\S]+?\\\\}\\\\};)`;\n    const helperObject = matchGroup1(helperPattern, body);\n    const callerFunc = `${decipherFuncName}(${DECIPHER_ARGUMENT});`;\n    return helperObject + decipherFunc + callerFunc;\n  } catch (e) {\n    return null;\n  }\n});\n\nconst getExtractFunctions = (extractFunctions, body, postProcess = null) => {\n  for (const extractFunction of extractFunctions) {\n    try {\n      const func = extractFunction(body);\n      if (!func) continue;\n      return new vm.Script(postProcess ? postProcess(func) : func);\n    } catch (err) {\n      continue;\n    }\n  }\n  return null;\n};\n\nlet decipherWarning = false;\n// This is required function to get the stream url, but we can continue if user doesn't need stream url.\nconst extractDecipher = body => {\n  // Faster: extractDecipherFunc\n  const decipherFunc = getExtractFunctions([extractDecipherFunc, extractDecipherWithName], body);\n  if (!decipherFunc && !decipherWarning) {\n    console.warn(\n      \"\\x1b[33mWARNING:\\x1B[0m Could not parse decipher function.\\n\" +\n        \"Stream URLs will be missing.\\n\" +\n        `Please report this issue with the \"${utils.saveDebugFile(\n          \"base.js\",\n          body,\n        )}\" file on https://github.com/distubejs/ytdl-core/issues/144.`,\n    );\n    decipherWarning = true;\n  }\n  return decipherFunc;\n};\n\nconst N_TRANSFORM_FUNC_NAME = \"DisTubeNTransformFunc\";\nconst extractNTransformFunc = (exports.n1 = body => {\n  try {\n    const nFunc = matchFirst(N_TRANSFORM_REGEXP, body);\n    const resultFunc = `var ${N_TRANSFORM_FUNC_NAME}=${nFunc}`;\n    const callerFunc = `${N_TRANSFORM_FUNC_NAME}(${N_ARGUMENT});`;\n    return resultFunc + callerFunc;\n  } catch (e) {\n    return null;\n  }\n});\n\nconst extractNTransformWithName = (exports.n2 = body => {\n  try {\n    const nFuncName = getFuncName(body, N_TRANSFORM_NAME_REGEXPS);\n    const funcPattern = `(${nFuncName.replace(/\\$/g, \"\\\\$\")}=function\\\\([a-zA-Z0-9_]+\\\\)\\\\{.+?\\\\})`;\n    const nTransformFunc = `var ${matchGroup1(funcPattern, body)};`;\n    const callerFunc = `${nFuncName}(${N_ARGUMENT});`;\n    return nTransformFunc + callerFunc;\n  } catch (e) {\n    return null;\n  }\n});\n\nlet nTransformWarning = false;\nconst extractNTransform = body => {\n  // Faster: extractNTransformFunc\n  const nTransformFunc = getExtractFunctions([extractNTransformFunc, extractNTransformWithName], body, code =>\n    code.replace(/if\\(typeof \\S+===\"undefined\"\\)return \\S+;/, \"\"),\n  );\n  if (!nTransformFunc && !nTransformWarning) {\n    // This is optional, so we can continue if it's not found, but it will bottleneck the download.\n    console.warn(\n      \"\\x1b[33mWARNING:\\x1B[0m Could not parse n transform function.\\n\" +\n        `Please report this issue with the \"${utils.saveDebugFile(\n          \"base.js\",\n          body,\n        )}\" file on https://github.com/distubejs/ytdl-core/issues/144.`,\n    );\n    nTransformWarning = true;\n  }\n  return nTransformFunc;\n};\n\n/**\n * Extracts the actions that should be taken to decipher a signature\n * and transform the n parameter\n *\n * @param {string} body\n * @returns {Array.<string>}\n */\nexports.extractFunctions = body => [extractDecipher(body), extractNTransform(body)];\n\n/**\n * Apply decipher and n-transform to individual format\n *\n * @param {Object} format\n * @param {vm.Script} decipherScript\n * @param {vm.Script} nTransformScript\n */\nexports.setDownloadURL = (format, decipherScript, nTransformScript) => {\n  if (!decipherScript) return;\n  const decipher = url => {\n    const args = querystring.parse(url);\n    if (!args.s) return args.url;\n    const components = new URL(decodeURIComponent(args.url));\n    const context = {};\n    context[DECIPHER_ARGUMENT] = decodeURIComponent(args.s);\n    components.searchParams.set(args.sp || \"sig\", decipherScript.runInNewContext(context));\n    return components.toString();\n  };\n  const nTransform = url => {\n    const components = new URL(decodeURIComponent(url));\n    const n = components.searchParams.get(\"n\");\n    if (!n || !nTransformScript) return url;\n    const context = {};\n    context[N_ARGUMENT] = n;\n    components.searchParams.set(\"n\", nTransformScript.runInNewContext(context));\n    return components.toString();\n  };\n  const cipher = !format.url;\n  const url = format.url || format.signatureCipher || format.cipher;\n  format.url = nTransform(cipher ? decipher(url) : url);\n  delete format.signatureCipher;\n  delete format.cipher;\n};\n\n/**\n * Applies decipher and n parameter transforms to all format URL's.\n *\n * @param {Array.<Object>} formats\n * @param {string} html5player\n * @param {Object} options\n */\nexports.decipherFormats = async (formats, html5player, options) => {\n  const decipheredFormats = {};\n  const [decipherScript, nTransformScript] = await exports.getFunctions(html5player, options);\n  formats.forEach(format => {\n    exports.setDownloadURL(format, decipherScript, nTransformScript);\n    decipheredFormats[format.url] = format;\n  });\n  return decipheredFormats;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@distube/ytdl-core/lib/sig.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@distube/ytdl-core/lib/url-utils.js":
/*!**********************************************************!*\
  !*** ./node_modules/@distube/ytdl-core/lib/url-utils.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/**\n * Get video ID.\n *\n * There are a few type of video URL formats.\n *  - https://www.youtube.com/watch?v=VIDEO_ID\n *  - https://m.youtube.com/watch?v=VIDEO_ID\n *  - https://youtu.be/VIDEO_ID\n *  - https://www.youtube.com/v/VIDEO_ID\n *  - https://www.youtube.com/embed/VIDEO_ID\n *  - https://music.youtube.com/watch?v=VIDEO_ID\n *  - https://gaming.youtube.com/watch?v=VIDEO_ID\n *\n * @param {string} link\n * @return {string}\n * @throws {Error} If unable to find a id\n * @throws {TypeError} If videoid doesn't match specs\n */\nconst validQueryDomains = new Set([\n  \"youtube.com\",\n  \"www.youtube.com\",\n  \"m.youtube.com\",\n  \"music.youtube.com\",\n  \"gaming.youtube.com\",\n]);\nconst validPathDomains = /^https?:\\/\\/(youtu\\.be\\/|(www\\.)?youtube\\.com\\/(embed|v|shorts|live)\\/)/;\nexports.getURLVideoID = link => {\n  const parsed = new URL(link.trim());\n  let id = parsed.searchParams.get(\"v\");\n  if (validPathDomains.test(link.trim()) && !id) {\n    const paths = parsed.pathname.split(\"/\");\n    id = parsed.host === \"youtu.be\" ? paths[1] : paths[2];\n  } else if (parsed.hostname && !validQueryDomains.has(parsed.hostname)) {\n    throw Error(\"Not a YouTube domain\");\n  }\n  if (!id) {\n    throw Error(`No video id found: \"${link}\"`);\n  }\n  id = id.substring(0, 11);\n  if (!exports.validateID(id)) {\n    throw TypeError(`Video id (${id}) does not match expected ` + `format (${idRegex.toString()})`);\n  }\n  return id;\n};\n\n/**\n * Gets video ID either from a url or by checking if the given string\n * matches the video ID format.\n *\n * @param {string} str\n * @returns {string}\n * @throws {Error} If unable to find a id\n * @throws {TypeError} If videoid doesn't match specs\n */\nconst urlRegex = /^https?:\\/\\//;\nexports.getVideoID = str => {\n  if (exports.validateID(str)) {\n    return str;\n  } else if (urlRegex.test(str.trim())) {\n    return exports.getURLVideoID(str);\n  } else {\n    throw Error(`No video id found: ${str}`);\n  }\n};\n\n/**\n * Returns true if given id satifies YouTube's id format.\n *\n * @param {string} id\n * @return {boolean}\n */\nconst idRegex = /^[a-zA-Z0-9-_]{11}$/;\nexports.validateID = id => idRegex.test(id.trim());\n\n/**\n * Checks wether the input string includes a valid id.\n *\n * @param {string} string\n * @returns {boolean}\n */\nexports.validateURL = string => {\n  try {\n    exports.getURLVideoID(string);\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRpc3R1YmUveXRkbC1jb3JlL2xpYi91cmwtdXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFlBQVk7QUFDWixZQUFZLE9BQU87QUFDbkIsWUFBWSxXQUFXO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QyxLQUFLO0FBQzVDO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyxHQUFHLHlDQUF5QyxtQkFBbUI7QUFDaEc7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLGFBQWE7QUFDYixZQUFZLE9BQU87QUFDbkIsWUFBWSxXQUFXO0FBQ3ZCO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLElBQUk7QUFDSixzQ0FBc0MsSUFBSTtBQUMxQztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixZQUFZO0FBQ1o7QUFDQSxnQ0FBZ0MsR0FBRztBQUNuQyxrQkFBa0I7O0FBRWxCO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixhQUFhO0FBQ2I7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxCdXJha1xcRG9jdW1lbnRzXFxHaXRIdWJcXHlvdXR1YmUtZG93bmxvYWRlclxcbm9kZV9tb2R1bGVzXFxAZGlzdHViZVxceXRkbC1jb3JlXFxsaWJcXHVybC11dGlscy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEdldCB2aWRlbyBJRC5cbiAqXG4gKiBUaGVyZSBhcmUgYSBmZXcgdHlwZSBvZiB2aWRlbyBVUkwgZm9ybWF0cy5cbiAqICAtIGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9VklERU9fSURcbiAqICAtIGh0dHBzOi8vbS55b3V0dWJlLmNvbS93YXRjaD92PVZJREVPX0lEXG4gKiAgLSBodHRwczovL3lvdXR1LmJlL1ZJREVPX0lEXG4gKiAgLSBodHRwczovL3d3dy55b3V0dWJlLmNvbS92L1ZJREVPX0lEXG4gKiAgLSBodHRwczovL3d3dy55b3V0dWJlLmNvbS9lbWJlZC9WSURFT19JRFxuICogIC0gaHR0cHM6Ly9tdXNpYy55b3V0dWJlLmNvbS93YXRjaD92PVZJREVPX0lEXG4gKiAgLSBodHRwczovL2dhbWluZy55b3V0dWJlLmNvbS93YXRjaD92PVZJREVPX0lEXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGxpbmtcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiB1bmFibGUgdG8gZmluZCBhIGlkXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IElmIHZpZGVvaWQgZG9lc24ndCBtYXRjaCBzcGVjc1xuICovXG5jb25zdCB2YWxpZFF1ZXJ5RG9tYWlucyA9IG5ldyBTZXQoW1xuICBcInlvdXR1YmUuY29tXCIsXG4gIFwid3d3LnlvdXR1YmUuY29tXCIsXG4gIFwibS55b3V0dWJlLmNvbVwiLFxuICBcIm11c2ljLnlvdXR1YmUuY29tXCIsXG4gIFwiZ2FtaW5nLnlvdXR1YmUuY29tXCIsXG5dKTtcbmNvbnN0IHZhbGlkUGF0aERvbWFpbnMgPSAvXmh0dHBzPzpcXC9cXC8oeW91dHVcXC5iZVxcL3wod3d3XFwuKT95b3V0dWJlXFwuY29tXFwvKGVtYmVkfHZ8c2hvcnRzfGxpdmUpXFwvKS87XG5leHBvcnRzLmdldFVSTFZpZGVvSUQgPSBsaW5rID0+IHtcbiAgY29uc3QgcGFyc2VkID0gbmV3IFVSTChsaW5rLnRyaW0oKSk7XG4gIGxldCBpZCA9IHBhcnNlZC5zZWFyY2hQYXJhbXMuZ2V0KFwidlwiKTtcbiAgaWYgKHZhbGlkUGF0aERvbWFpbnMudGVzdChsaW5rLnRyaW0oKSkgJiYgIWlkKSB7XG4gICAgY29uc3QgcGF0aHMgPSBwYXJzZWQucGF0aG5hbWUuc3BsaXQoXCIvXCIpO1xuICAgIGlkID0gcGFyc2VkLmhvc3QgPT09IFwieW91dHUuYmVcIiA/IHBhdGhzWzFdIDogcGF0aHNbMl07XG4gIH0gZWxzZSBpZiAocGFyc2VkLmhvc3RuYW1lICYmICF2YWxpZFF1ZXJ5RG9tYWlucy5oYXMocGFyc2VkLmhvc3RuYW1lKSkge1xuICAgIHRocm93IEVycm9yKFwiTm90IGEgWW91VHViZSBkb21haW5cIik7XG4gIH1cbiAgaWYgKCFpZCkge1xuICAgIHRocm93IEVycm9yKGBObyB2aWRlbyBpZCBmb3VuZDogXCIke2xpbmt9XCJgKTtcbiAgfVxuICBpZCA9IGlkLnN1YnN0cmluZygwLCAxMSk7XG4gIGlmICghZXhwb3J0cy52YWxpZGF0ZUlEKGlkKSkge1xuICAgIHRocm93IFR5cGVFcnJvcihgVmlkZW8gaWQgKCR7aWR9KSBkb2VzIG5vdCBtYXRjaCBleHBlY3RlZCBgICsgYGZvcm1hdCAoJHtpZFJlZ2V4LnRvU3RyaW5nKCl9KWApO1xuICB9XG4gIHJldHVybiBpZDtcbn07XG5cbi8qKlxuICogR2V0cyB2aWRlbyBJRCBlaXRoZXIgZnJvbSBhIHVybCBvciBieSBjaGVja2luZyBpZiB0aGUgZ2l2ZW4gc3RyaW5nXG4gKiBtYXRjaGVzIHRoZSB2aWRlbyBJRCBmb3JtYXQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0clxuICogQHJldHVybnMge3N0cmluZ31cbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiB1bmFibGUgdG8gZmluZCBhIGlkXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IElmIHZpZGVvaWQgZG9lc24ndCBtYXRjaCBzcGVjc1xuICovXG5jb25zdCB1cmxSZWdleCA9IC9eaHR0cHM/OlxcL1xcLy87XG5leHBvcnRzLmdldFZpZGVvSUQgPSBzdHIgPT4ge1xuICBpZiAoZXhwb3J0cy52YWxpZGF0ZUlEKHN0cikpIHtcbiAgICByZXR1cm4gc3RyO1xuICB9IGVsc2UgaWYgKHVybFJlZ2V4LnRlc3Qoc3RyLnRyaW0oKSkpIHtcbiAgICByZXR1cm4gZXhwb3J0cy5nZXRVUkxWaWRlb0lEKHN0cik7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgRXJyb3IoYE5vIHZpZGVvIGlkIGZvdW5kOiAke3N0cn1gKTtcbiAgfVxufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgZ2l2ZW4gaWQgc2F0aWZpZXMgWW91VHViZSdzIGlkIGZvcm1hdC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gaWRcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmNvbnN0IGlkUmVnZXggPSAvXlthLXpBLVowLTktX117MTF9JC87XG5leHBvcnRzLnZhbGlkYXRlSUQgPSBpZCA9PiBpZFJlZ2V4LnRlc3QoaWQudHJpbSgpKTtcblxuLyoqXG4gKiBDaGVja3Mgd2V0aGVyIHRoZSBpbnB1dCBzdHJpbmcgaW5jbHVkZXMgYSB2YWxpZCBpZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0cy52YWxpZGF0ZVVSTCA9IHN0cmluZyA9PiB7XG4gIHRyeSB7XG4gICAgZXhwb3J0cy5nZXRVUkxWaWRlb0lEKHN0cmluZyk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@distube/ytdl-core/lib/url-utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@distube/ytdl-core/lib/utils.js":
/*!******************************************************!*\
  !*** ./node_modules/@distube/ytdl-core/lib/utils.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const { request } = __webpack_require__(/*! undici */ \"(rsc)/./node_modules/undici/index.js\");\nconst { writeFileSync } = __webpack_require__(/*! fs */ \"fs\");\nconst AGENT = __webpack_require__(/*! ./agent */ \"(rsc)/./node_modules/@distube/ytdl-core/lib/agent.js\");\n\n/**\n * Extract string inbetween another.\n *\n * @param {string} haystack\n * @param {string} left\n * @param {string} right\n * @returns {string}\n */\nconst between = (exports.between = (haystack, left, right) => {\n  let pos;\n  if (left instanceof RegExp) {\n    const match = haystack.match(left);\n    if (!match) {\n      return \"\";\n    }\n    pos = match.index + match[0].length;\n  } else {\n    pos = haystack.indexOf(left);\n    if (pos === -1) {\n      return \"\";\n    }\n    pos += left.length;\n  }\n  haystack = haystack.slice(pos);\n  pos = haystack.indexOf(right);\n  if (pos === -1) {\n    return \"\";\n  }\n  haystack = haystack.slice(0, pos);\n  return haystack;\n});\n\nexports.tryParseBetween = (body, left, right, prepend = \"\", append = \"\") => {\n  try {\n    let data = between(body, left, right);\n    if (!data) return null;\n    return JSON.parse(`${prepend}${data}${append}`);\n  } catch (e) {\n    return null;\n  }\n};\n\n/**\n * Get a number from an abbreviated number string.\n *\n * @param {string} string\n * @returns {number}\n */\nexports.parseAbbreviatedNumber = string => {\n  const match = string\n    .replace(\",\", \".\")\n    .replace(\" \", \"\")\n    .match(/([\\d,.]+)([MK]?)/);\n  if (match) {\n    let [, num, multi] = match;\n    num = parseFloat(num);\n    return Math.round(multi === \"M\" ? num * 1000000 : multi === \"K\" ? num * 1000 : num);\n  }\n  return null;\n};\n\n/**\n * Escape sequences for cutAfterJS\n * @param {string} start the character string the escape sequence\n * @param {string} end the character string to stop the escape seequence\n * @param {undefined|Regex} startPrefix a regex to check against the preceding 10 characters\n */\nconst ESCAPING_SEQUENZES = [\n  // Strings\n  { start: '\"', end: '\"' },\n  { start: \"'\", end: \"'\" },\n  { start: \"`\", end: \"`\" },\n  // RegeEx\n  { start: \"/\", end: \"/\", startPrefix: /(^|[[{:;,/])\\s?$/ },\n];\n\n/**\n * Match begin and end braces of input JS, return only JS\n *\n * @param {string} mixedJson\n * @returns {string}\n */\nexports.cutAfterJS = mixedJson => {\n  // Define the general open and closing tag\n  let open, close;\n  if (mixedJson[0] === \"[\") {\n    open = \"[\";\n    close = \"]\";\n  } else if (mixedJson[0] === \"{\") {\n    open = \"{\";\n    close = \"}\";\n  }\n\n  if (!open) {\n    throw new Error(`Can't cut unsupported JSON (need to begin with [ or { ) but got: ${mixedJson[0]}`);\n  }\n\n  // States if the loop is currently inside an escaped js object\n  let isEscapedObject = null;\n\n  // States if the current character is treated as escaped or not\n  let isEscaped = false;\n\n  // Current open brackets to be closed\n  let counter = 0;\n\n  let i;\n  // Go through all characters from the start\n  for (i = 0; i < mixedJson.length; i++) {\n    // End of current escaped object\n    if (!isEscaped && isEscapedObject !== null && mixedJson[i] === isEscapedObject.end) {\n      isEscapedObject = null;\n      continue;\n      // Might be the start of a new escaped object\n    } else if (!isEscaped && isEscapedObject === null) {\n      for (const escaped of ESCAPING_SEQUENZES) {\n        if (mixedJson[i] !== escaped.start) continue;\n        // Test startPrefix against last 10 characters\n        if (!escaped.startPrefix || mixedJson.substring(i - 10, i).match(escaped.startPrefix)) {\n          isEscapedObject = escaped;\n          break;\n        }\n      }\n      // Continue if we found a new escaped object\n      if (isEscapedObject !== null) {\n        continue;\n      }\n    }\n\n    // Toggle the isEscaped boolean for every backslash\n    // Reset for every regular character\n    isEscaped = mixedJson[i] === \"\\\\\" && !isEscaped;\n\n    if (isEscapedObject !== null) continue;\n\n    if (mixedJson[i] === open) {\n      counter++;\n    } else if (mixedJson[i] === close) {\n      counter--;\n    }\n\n    // All brackets have been closed, thus end of JSON is reached\n    if (counter === 0) {\n      // Return the cut JSON\n      return mixedJson.substring(0, i + 1);\n    }\n  }\n\n  // We ran through the whole string and ended up with an unclosed bracket\n  throw Error(\"Can't cut unsupported JSON (no matching closing bracket found)\");\n};\n\nclass UnrecoverableError extends Error {}\n/**\n * Checks if there is a playability error.\n *\n * @param {Object} player_response\n * @returns {!Error}\n */\nexports.playError = player_response => {\n  const playability = player_response && player_response.playabilityStatus;\n  if (!playability) return null;\n  if ([\"ERROR\", \"LOGIN_REQUIRED\"].includes(playability.status)) {\n    return new UnrecoverableError(playability.reason || (playability.messages && playability.messages[0]));\n  }\n  if (playability.status === \"LIVE_STREAM_OFFLINE\") {\n    return new UnrecoverableError(playability.reason || \"The live stream is offline.\");\n  }\n  if (playability.status === \"UNPLAYABLE\") {\n    return new UnrecoverableError(playability.reason || \"This video is unavailable.\");\n  }\n  return null;\n};\n\n// Undici request\nexports.request = async (url, options = {}) => {\n  let { requestOptions, rewriteRequest } = options;\n\n  if (typeof rewriteRequest === \"function\") {\n    const request = rewriteRequest(url, requestOptions);\n    requestOptions = request.requestOptions;\n    url = request.url;\n  }\n\n  const req = await request(url, requestOptions);\n  const code = req.statusCode.toString();\n  if (code.startsWith(\"2\")) {\n    if (req.headers[\"content-type\"].includes(\"application/json\")) return req.body.json();\n    return req.body.text();\n  }\n  if (code.startsWith(\"3\")) return exports.request(req.headers.location, options);\n  const e = new Error(`Status code: ${code}`);\n  e.statusCode = req.statusCode;\n  throw e;\n};\n\n/**\n * Temporary helper to help deprecating a few properties.\n *\n * @param {Object} obj\n * @param {string} prop\n * @param {Object} value\n * @param {string} oldPath\n * @param {string} newPath\n */\nexports.deprecate = (obj, prop, value, oldPath, newPath) => {\n  Object.defineProperty(obj, prop, {\n    get: () => {\n      console.warn(`\\`${oldPath}\\` will be removed in a near future release, ` + `use \\`${newPath}\\` instead.`);\n      return value;\n    },\n  });\n};\n\n// Check for updates.\nconst pkg = __webpack_require__(/*! ../package.json */ \"(rsc)/./node_modules/@distube/ytdl-core/package.json\");\nconst UPDATE_INTERVAL = 1000 * 60 * 60 * 12;\nlet updateWarnTimes = 0;\nexports.lastUpdateCheck = 0;\nexports.checkForUpdates = () => {\n  if (\n    !process.env.YTDL_NO_UPDATE &&\n    !pkg.version.startsWith(\"0.0.0-\") &&\n    Date.now() - exports.lastUpdateCheck >= UPDATE_INTERVAL\n  ) {\n    exports.lastUpdateCheck = Date.now();\n    return exports\n      .request(\"https://api.github.com/repos/distubejs/ytdl-core/contents/package.json\", {\n        requestOptions: {\n          headers: {\n            \"User-Agent\":\n              \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.3\",\n          },\n        },\n      })\n      .then(\n        response => {\n          const buf = Buffer.from(response.content, response.encoding);\n          const pkgFile = JSON.parse(buf.toString(\"ascii\"));\n          if (pkgFile.version !== pkg.version && updateWarnTimes++ < 5) {\n            // eslint-disable-next-line max-len\n            console.warn(\n              '\\x1b[33mWARNING:\\x1B[0m @distube/ytdl-core is out of date! Update with \"npm install @distube/ytdl-core@latest\".',\n            );\n          }\n        },\n        err => {\n          console.warn(\"Error checking for updates:\", err.message);\n          console.warn(\"You can disable this check by setting the `YTDL_NO_UPDATE` env variable.\");\n        },\n      );\n  }\n  return null;\n};\n\n/**\n * Gets random IPv6 Address from a block\n *\n * @param {string} ip the IPv6 block in CIDR-Notation\n * @returns {string}\n */\nconst getRandomIPv6 = (exports.getRandomIPv6 = ip => {\n  // Start with a fast Regex-Check\n  if (!isIPv6(ip)) throw Error(\"Invalid IPv6 format\");\n  // Start by splitting and normalizing addr and mask\n  const [rawAddr, rawMask] = ip.split(\"/\");\n  let base10Mask = parseInt(rawMask);\n  if (!base10Mask || base10Mask > 128 || base10Mask < 24) throw Error(\"Invalid IPv6 subnet\");\n  const base10addr = normalizeIP(rawAddr);\n  // Get random addr to pad with\n  // using Math.random since we're not requiring high level of randomness\n  const randomAddr = new Array(8).fill(1).map(() => Math.floor(Math.random() * 0xffff));\n\n  // Merge base10addr with randomAddr\n  const mergedAddr = randomAddr.map((randomItem, idx) => {\n    // Calculate the amount of static bits\n    const staticBits = Math.min(base10Mask, 16);\n    // Adjust the bitmask with the staticBits\n    base10Mask -= staticBits;\n    // Calculate the bitmask\n    // lsb makes the calculation way more complicated\n    const mask = 0xffff - (2 ** (16 - staticBits) - 1);\n    // Combine base10addr and random\n    return (base10addr[idx] & mask) + (randomItem & (mask ^ 0xffff));\n  });\n  // Return new addr\n  return mergedAddr.map(x => x.toString(\"16\")).join(\":\");\n});\n\n// eslint-disable-next-line max-len\nconst IPV6_REGEX =\n  /^(([0-9a-f]{1,4}:)(:[0-9a-f]{1,4}){1,6}|([0-9a-f]{1,4}:){1,2}(:[0-9a-f]{1,4}){1,5}|([0-9a-f]{1,4}:){1,3}(:[0-9a-f]{1,4}){1,4}|([0-9a-f]{1,4}:){1,4}(:[0-9a-f]{1,4}){1,3}|([0-9a-f]{1,4}:){1,5}(:[0-9a-f]{1,4}){1,2}|([0-9a-f]{1,4}:){1,6}(:[0-9a-f]{1,4})|([0-9a-f]{1,4}:){1,7}(([0-9a-f]{1,4})|:))\\/(1[0-1]\\d|12[0-8]|\\d{1,2})$/;\n/**\n * Quick check for a valid IPv6\n * The Regex only accepts a subset of all IPv6 Addresses\n *\n * @param {string} ip the IPv6 block in CIDR-Notation to test\n * @returns {boolean} true if valid\n */\nconst isIPv6 = (exports.isIPv6 = ip => IPV6_REGEX.test(ip));\n\n/**\n * Normalise an IP Address\n *\n * @param {string} ip the IPv6 Addr\n * @returns {number[]} the 8 parts of the IPv6 as Integers\n */\nconst normalizeIP = (exports.normalizeIP = ip => {\n  // Split by fill position\n  const parts = ip.split(\"::\").map(x => x.split(\":\"));\n  // Normalize start and end\n  const partStart = parts[0] || [];\n  const partEnd = parts[1] || [];\n  partEnd.reverse();\n  // Placeholder for full ip\n  const fullIP = new Array(8).fill(0);\n  // Fill in start and end parts\n  for (let i = 0; i < Math.min(partStart.length, 8); i++) {\n    fullIP[i] = parseInt(partStart[i], 16) || 0;\n  }\n  for (let i = 0; i < Math.min(partEnd.length, 8); i++) {\n    fullIP[7 - i] = parseInt(partEnd[i], 16) || 0;\n  }\n  return fullIP;\n});\n\nexports.saveDebugFile = (name, body) => {\n  const filename = `${+new Date()}-${name}`;\n  writeFileSync(filename, body);\n  return filename;\n};\n\nconst findPropKeyInsensitive = (obj, prop) =>\n  Object.keys(obj).find(p => p.toLowerCase() === prop.toLowerCase()) || null;\n\nexports.getPropInsensitive = (obj, prop) => {\n  const key = findPropKeyInsensitive(obj, prop);\n  return key && obj[key];\n};\n\nexports.setPropInsensitive = (obj, prop, value) => {\n  const key = findPropKeyInsensitive(obj, prop);\n  obj[key || prop] = value;\n  return key;\n};\n\nlet oldCookieWarning = true;\nlet oldDispatcherWarning = true;\nexports.applyDefaultAgent = options => {\n  if (!options.agent) {\n    const { jar } = AGENT.defaultAgent;\n    const c = exports.getPropInsensitive(options.requestOptions.headers, \"cookie\");\n    if (c) {\n      jar.removeAllCookiesSync();\n      AGENT.addCookiesFromString(jar, c);\n      if (oldCookieWarning) {\n        oldCookieWarning = false;\n        console.warn(\n          \"\\x1b[33mWARNING:\\x1B[0m Using old cookie format, \" +\n            \"please use the new one instead. (https://github.com/distubejs/ytdl-core#cookies-support)\",\n        );\n      }\n    }\n    if (options.requestOptions.dispatcher && oldDispatcherWarning) {\n      oldDispatcherWarning = false;\n      console.warn(\n        \"\\x1b[33mWARNING:\\x1B[0m Your dispatcher is overridden by `ytdl.Agent`. \" +\n          \"To implement your own, check out the documentation. \" +\n          \"(https://github.com/distubejs/ytdl-core#how-to-implement-ytdlagent-with-your-own-dispatcher)\",\n      );\n    }\n    options.agent = AGENT.defaultAgent;\n  }\n};\n\nlet oldLocalAddressWarning = true;\nexports.applyOldLocalAddress = options => {\n  if (\n    !options.requestOptions ||\n    !options.requestOptions.localAddress ||\n    options.requestOptions.localAddress === options.agent.localAddress\n  )\n    return;\n  options.agent = AGENT.createAgent(undefined, { localAddress: options.requestOptions.localAddress });\n  if (oldLocalAddressWarning) {\n    oldLocalAddressWarning = false;\n    console.warn(\n      \"\\x1b[33mWARNING:\\x1B[0m Using old localAddress option, \" +\n        \"please add it to the agent options instead. (https://github.com/distubejs/ytdl-core#ip-rotation)\",\n    );\n  }\n};\n\nlet oldIpRotationsWarning = true;\nexports.applyIPv6Rotations = options => {\n  if (options.IPv6Block) {\n    options.requestOptions = Object.assign({}, options.requestOptions, {\n      localAddress: getRandomIPv6(options.IPv6Block),\n    });\n    if (oldIpRotationsWarning) {\n      oldIpRotationsWarning = false;\n      oldLocalAddressWarning = false;\n      console.warn(\n        \"\\x1b[33mWARNING:\\x1B[0m IPv6Block option is deprecated, \" +\n          \"please create your own ip rotation instead. (https://github.com/distubejs/ytdl-core#ip-rotation)\",\n      );\n    }\n  }\n};\n\nexports.applyDefaultHeaders = options => {\n  options.requestOptions = Object.assign({}, options.requestOptions);\n  options.requestOptions.headers = Object.assign(\n    {},\n    {\n      // eslint-disable-next-line max-len\n      \"User-Agent\":\n        \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.101 Safari/537.36\",\n    },\n    options.requestOptions.headers,\n  );\n};\n\nexports.generateClientPlaybackNonce = length => {\n  const CPN_CHARS = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\";\n  return Array.from({ length }, () => CPN_CHARS[Math.floor(Math.random() * CPN_CHARS.length)]).join(\"\");\n};\n\nexports.applyPlayerClients = options => {\n  if (!options.playerClients || options.playerClients.length === 0) {\n    options.playerClients = [\"WEB\", \"WEB_CREATOR\", \"IOS\"];\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@distube/ytdl-core/lib/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@distube/ytdl-core/package.json":
/*!******************************************************!*\
  !*** ./node_modules/@distube/ytdl-core/package.json ***!
  \******************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"name":"@distube/ytdl-core","description":"DisTube fork of ytdl-core. YouTube video downloader in pure javascript.","keywords":["youtube","video","download","distube"],"version":"4.15.8","repository":{"type":"git","url":"git://github.com/distubejs/ytdl-core.git"},"author":"Skick (https://github.com/skick1234)","contributors":["fent <fentbox@gmail.com> (https://github.com/fent)","Tobias Kutscha (https://github.com/TimeForANinja)","Andrew Kelley (https://github.com/andrewrk)","Mauricio Allende (https://github.com/mallendeo)","Rodrigo Altamirano (https://github.com/raltamirano)","Jim Buck (https://github.com/JimmyBoh)","Pawel Rucinski (https://github.com/Roki100)","Alexander Paolini (https://github.com/Million900o)"],"main":"./lib/index.js","types":"./typings/index.d.ts","files":["lib","typings"],"dependencies":{"http-cookie-agent":"^6.0.8","https-proxy-agent":"^7.0.6","m3u8stream":"^0.8.6","miniget":"^4.2.3","sax":"^1.4.1","tough-cookie":"^4.1.4","undici":"five"},"devDependencies":{"@types/node":"^22.10.2","prettier":"^3.4.2","typescript":"^5.7.2"},"engines":{"node":">=14.0"},"license":"MIT","funding":"https://github.com/distubejs/ytdl-core?sponsor","scripts":{"prettier":"prettier --write \\"**/*.{js,json,yml,md,ts}\\""}}');

/***/ })

};
;